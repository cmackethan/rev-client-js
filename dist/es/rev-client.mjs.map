{"version":3,"file":"rev-client.mjs","sources":["../../src/utils/index.ts","../../src/rev-error.ts","../../src/api/admin.ts","../../src/utils/parse-csv.ts","../../src/api/audit.ts","../../src/interop/index.ts","../../src/api/auth.ts","../../src/api/category.ts","../../src/api/channel.ts","../../src/api/device.ts","../../src/utils/request-utils.ts","../../src/api/group.ts","../../src/api/playlist.ts","../../src/api/recording.ts","../../src/utils/file-utils.ts","../../src/api/upload.ts","../../src/api/user.ts","../../src/api/video.ts","../../src/api/webcast.ts","../../src/api/zones.ts","../../src/session.ts","../../src/rev-client.ts","../../src/interop/node-polyfills.ts"],"sourcesContent":["import { Rev } from '..';\r\n\r\nconst { toString: _toString } = Object.prototype;\r\n\r\nexport function isPlainObject<T = { [key: string]: any; } | any[]>(val: unknown): val is T {\r\n    if (_toString.call(val) !== '[object Object]') {\r\n        return false;\r\n    }\r\n    const prototype = Object.getPrototypeOf(val);\r\n    return prototype === null || prototype === Object.getPrototypeOf({ });\r\n}\r\n\r\nexport function isBlobLike(val: unknown): val is Blob | File {\r\n    return typeof (val as Blob)?.stream === 'function';\r\n}\r\n\r\nexport function isReadable<T = any>(val: unknown): val is AsyncIterable<T> {\r\n    return typeof (val as AsyncIterable<T>)[Symbol.asyncIterator] === 'function';\r\n}\r\n\r\n/**\r\n * Retry a function multiple times, sleeping before attempts\r\n * @param {() => Promise<T>} fn function to attempt. Return value if no error thrown\r\n * @param {(err: Error, attempt: number) => boolean} [shouldRetry] callback on error.\r\n * @param {number} [maxAttempts] maximum number of retry attempts before throwing error\r\n * @param {number} [sleepMilliseconds] milliseconds to wait between attempts\r\n * @returns {Promise<T>}\r\n */\r\nexport async function retry<T, E extends Error>(fn: () => Promise<T>, shouldRetry: (err: E, attempt?: number) => boolean = () => true, maxAttempts: number = 3, sleepMilliseconds: number = 1000) {\r\n    let attempt = 0;\r\n    while (attempt < maxAttempts) {\r\n        try {\r\n            const result = await fn();\r\n            return result;\r\n        } catch (err: any) {\r\n            attempt += 1;\r\n            if (attempt >= maxAttempts || !shouldRetry(err, attempt)) {\r\n                throw err;\r\n            }\r\n            await sleep(sleepMilliseconds);\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * delay async execution, with optional early exit using abort signal\r\n * @param ms\r\n * @param signal\r\n * @returns\r\n */\r\nexport async function sleep(ms: number, signal?: AbortSignal) {\r\n    return new Promise<void>(done => {\r\n        let timer: ReturnType<typeof setTimeout>;\r\n        const cleanup = () => {\r\n            clearTimeout(timer);\r\n            signal?.removeEventListener('abort', cleanup);\r\n            done();\r\n        };\r\n        timer = setTimeout(done, ms);\r\n        signal?.addEventListener('abort', cleanup);\r\n    });\r\n}\r\n\r\n/** try to parse as json */\r\nexport function tryParseJson(val: string): any {\r\n    if (val !== 'null' && val) {\r\n        try {\r\n            return JSON.parse(val);\r\n        } catch (err) {\r\n            // nothing\r\n        }\r\n    }\r\n    return null;\r\n};\r\n","import { isPlainObject, tryParseJson } from './utils';\r\n\r\nexport class RevError extends Error {\r\n    status: number;\r\n    url: string;\r\n    code: string;\r\n    detail: string;\r\n    constructor(response: Response, body: { [key: string]: any; } | string) {\r\n        const {\r\n            status = 500,\r\n            statusText = '',\r\n            url\r\n        } = response;\r\n        super(`${status} ${statusText}`);\r\n        // Chrome/node specific function\r\n        if ('captureStackTrace' in Error) {\r\n            (Error as any).captureStackTrace(this, this.constructor);\r\n        }\r\n\r\n        this.status = status;\r\n        this.url = url;\r\n        this.code = `${status}`;\r\n        this.detail = statusText;\r\n        // Some Rev API responses include additional details in its body\r\n        if (isPlainObject(body)) {\r\n            if (body.code) {\r\n                this.code = body.code;\r\n            }\r\n            if (body.detail) {\r\n                this.detail = body.detail;\r\n            }\r\n        } else if (typeof body === 'string') {\r\n            body = body.trim();\r\n            // try to parse as JSON\r\n            if (body.startsWith('{')) {\r\n                const { code, detail } = tryParseJson(body) || { };\r\n                if (code) { this.code = code; }\r\n                if (detail) { this.detail = detail; }\r\n            } else if (this.status === 429) {\r\n                this.detail = 'Too Many Requests';\r\n            } else if (/^(<!DOCTYPE|<html)/.test(body)) {\r\n                // if html then strip out the extra cruft\r\n                this.detail = body\r\n                    .replace(/.*<body>\\s+/s, '')\r\n                    .replace(/<\\/body>.*/s, '')\r\n                    .slice(0, 256);\r\n            }\r\n        }\r\n    }\r\n    get name() {\r\n        return this.constructor.name;\r\n    }\r\n    get [Symbol.toStringTag]() {\r\n        return this.constructor.name;\r\n    }\r\n    static async create(response: Response) {\r\n        let body: any;\r\n\r\n        try {\r\n            // retrieve body - constructor will decode as json\r\n            body = await response.text();\r\n        } catch (err) {\r\n            body = {\r\n                code: 'Unknown',\r\n                detail: `Unable to parse error response body: ${err}`\r\n            };\r\n        }\r\n        return new RevError(response, body);\r\n    }\r\n}\r\n\r\nexport class ScrollError extends Error {\r\n    status: number;\r\n    code: string;\r\n    detail: string;\r\n    constructor(status: number = 408, code: string = 'ScrollExpired', detail: string = 'Timeout while fetching all results in search request') {\r\n        super('Search Scroll Expired');\r\n        this.status = status;\r\n        this.code = code;\r\n        this.detail = detail;\r\n    }\r\n    get name() {\r\n        return this.constructor.name;\r\n    }\r\n    get [Symbol.toStringTag]() {\r\n        return this.constructor.name;\r\n    }\r\n}\r\n","import { BrandingSettings, CustomField, RevError, Role } from '..';\r\nimport type { RevClient } from '../rev-client';\r\n\r\n// if true allow storing/retrieving from cached values. 'Force' means refresh value saved in cache. false means bypass cache\r\ntype CacheOption = boolean | 'Force'\r\n\r\nexport default function adminAPIFactory(rev: RevClient) {\r\n    let roles: Role.Details[];\r\n    let customFields: CustomField[];\r\n\r\n    const adminAPI = {\r\n        /**\r\n        * get mapping of role names to role IDs\r\n        * @param cache - if true allow storing/retrieving from cached values. 'Force' means refresh value saved in cache\r\n        */\r\n        async roles(cache: CacheOption = true): Promise<Role.Details[]> {\r\n            // retrieve from cached values if already stored. otherwise get from API\r\n            // if cache is 'Force' then refresh from\r\n            if (roles && cache === true) {\r\n                return roles;\r\n            }\r\n            const response = await rev.get('/api/v2/users/roles');\r\n            if (cache) {\r\n                roles = response;\r\n            }\r\n            return response;\r\n        },\r\n        /**\r\n        * Get a Role (with the role id) based on its name\r\n        * @param name Name of the Role, i.e. \"Media Viewer\"\r\n        * @param fromCache - if true then use previously cached Role listing (more efficient)\r\n        */\r\n        async getRoleByName(name: Role.RoleName, fromCache: CacheOption = true): Promise<Role> {\r\n            const roles = await adminAPI.roles(fromCache);\r\n            const role = roles.find(r => r.name === name);\r\n            if (!role) {\r\n                throw new TypeError(`Invalid Role Name ${name}. Valid values are: ${roles.map(r => r.name).join(', ')}`);\r\n            }\r\n            return {\r\n                id: role.id,\r\n                name: role.name\r\n            };\r\n        },\r\n        /**\r\n        * get list of custom fields\r\n        * @param cache - if true allow storing/retrieving from cached values. 'Force' means refresh value saved in cache\r\n        */\r\n        async customFields(cache: CacheOption = true): Promise<CustomField[]> {\r\n            // retrieve from cached values if already stored. otherwise get from API\r\n            // if cache is 'Force' then refresh from\r\n            if (customFields && cache === true) {\r\n                return customFields;\r\n            }\r\n            const response = await rev.get('/api/v2/video-fields', undefined, { responseType: 'json' });\r\n            if (cache) {\r\n                customFields = response;\r\n            }\r\n            return response;\r\n        },\r\n        /**\r\n        * Get a Custom Field based on its name\r\n        * @param name name of the Custom Field\r\n        * @param fromCache if true then use previously cached Role listing (more efficient)\r\n        */\r\n        async getCustomFieldByName(name: string, fromCache: CacheOption = true): Promise<CustomField> {\r\n            const customFields = await adminAPI.customFields(fromCache);\r\n            const field = customFields.find(cf => cf.name === name);\r\n            if (!field) {\r\n                throw new TypeError(`Invalid Custom Field Name ${name}. Valid values are: ${customFields.map(cf => cf.name).join(', ')}`);\r\n            }\r\n            return field;\r\n        },\r\n        async brandingSettings(): Promise<BrandingSettings> {\r\n            return rev.get('/api/v2/accounts/branding-settings');\r\n        },\r\n        /**\r\n        * get system health - returns 200 if system is active and responding, otherwise throws error\r\n        */\r\n        async verifySystemHealth(): Promise<boolean> {\r\n            await rev.get('/api/v2/system-health');\r\n            return true;\r\n        },\r\n        /**\r\n        * gets list of scheduled maintenance windows\r\n        */\r\n        async maintenanceSchedule(): Promise<{start: string, end: string}[]> {\r\n            const {schedules} = await rev.get('/api/v2/maintenance-schedule');\r\n            return schedules;\r\n        }\r\n    };\r\n    return adminAPI;\r\n}\r\n","/**\r\n * simple helper function to parse CSV data into JSON\r\n */\r\nexport function parseCSV(raw: string) {\r\n    raw = raw.replace(/(\\r\\n|\\n|\\r)/gm, '\\n').replace(/\\n$/g, '');\r\n\r\n    let cur = '';\r\n    let inQuote = false;\r\n    let fieldQuoted = false;\r\n    let field: string | undefined = '';\r\n    let row: (string | undefined)[] = [];\r\n    let out: (string | undefined)[][] = [];\r\n    let i: number;\r\n    const n = raw.length;\r\n\r\n    function processField(field: string) {\r\n        if (fieldQuoted) { return field; }\r\n        if (field === '') { return undefined; }\r\n        return field.trim();\r\n    }\r\n\r\n    for (i = 0; i < n; i += 1) {\r\n        cur = raw.charAt(i);\r\n\r\n        if (!inQuote && (cur === ',' || cur === '\\n')) {\r\n            field = processField(field);\r\n            row.push(field);\r\n            if (cur === '\\n') {\r\n                out.push(row);\r\n                row = [];\r\n            }\r\n            field = '';\r\n            fieldQuoted = false;\r\n        } else if (cur === '\"') {\r\n            if (!inQuote) {\r\n                inQuote = true;\r\n                fieldQuoted = true;\r\n            } else {\r\n                if (raw.charAt(i + 1) === '\"') {\r\n                    field += '\"';\r\n                    i += 1;\r\n                } else {\r\n                    inQuote = false;\r\n                }\r\n            }\r\n        } else {\r\n            field += cur === '\\n' ? '\\n' : cur;\r\n        }\r\n    }\r\n\r\n    // Add the last field\r\n    field = processField(field);\r\n    row.push(field);\r\n    out.push(row);\r\n\r\n    const headers: string[] = out.shift() as string[];\r\n    return out\r\n        .map((line: (string | undefined)[]) => {\r\n            const obj: Record<string, string> = { };\r\n            line\r\n                .forEach((field, i) => {\r\n                    if (field !== undefined) {\r\n                        obj[headers[i]] = field;\r\n                    }\r\n                });\r\n            return obj;\r\n        });\r\n}\r\n","import type { RevClient } from '../rev-client';\r\nimport type { Audit, Rev } from '../types';\r\nimport { tryParseJson } from '../utils';\r\nimport { parseCSV } from '../utils/parse-csv';\r\n\r\nexport default function auditAPIFactory(rev: RevClient) {\r\n    const auditAPI = {\r\n        /**\r\n        * Logs of user login / logout / failed login activity\r\n        */\r\n        accountAccess(accountId: string, options?: Audit.Options<Audit.UserAccessEntry>) {\r\n            return new AuditRequest<Audit.UserAccessEntry>(rev, `/network/audit/accounts/${accountId}/userAccess`, 'UserAccess', options);\r\n        },\r\n        userAccess(userId: string, accountId: string, options?: Audit.Options<Audit.UserAccessEntry>) {\r\n            return new AuditRequest<Audit.UserAccessEntry>(rev, `/network/audit/accounts/${accountId}/userAccess/${userId}`, `UserAccess_${userId}`, options);\r\n        },\r\n        /**\r\n        * Operations on User Records (create, delete, etc)\r\n        */\r\n        accountUsers(accountId: string, options?: Audit.Options<Audit.UserEntry>) {\r\n            return new AuditRequest<Audit.UserEntry>(rev, `/network/audit/accounts/${accountId}/userAccess`, 'User', options);\r\n        },\r\n        user(userId: string, accountId: string, options?: Audit.Options<Audit.UserEntry>) {\r\n            return new AuditRequest<Audit.UserEntry>(rev, `/network/audit/accounts/${accountId}/userAccess/${userId}`, 'User', options);\r\n        },\r\n        /**\r\n        * Operations on Group Records (create, delete, etc)\r\n        */\r\n        accountGroups(accountId: string, options?: Audit.Options<Audit.GroupEntry>) {\r\n            return new AuditRequest<Audit.GroupEntry>(rev, `/network/audit/accounts/${accountId}/groups`, 'Groups', options);\r\n        },\r\n        group(groupId: string, accountId: string, options?: Audit.Options<Audit.GroupEntry>) {\r\n            return new AuditRequest<Audit.GroupEntry>(rev, `/network/audit/accounts/${accountId}/groups/${groupId}`, 'Group', options);\r\n        },\r\n        /**\r\n        * Operations on Device Records (create, delete, etc)\r\n        */\r\n        accountDevices(accountId: string, options?: Audit.Options<Audit.DeviceEntry>) {\r\n            return new AuditRequest<Audit.DeviceEntry>(rev, `/network/audit/accounts/${accountId}/devices`, 'Devices', options);\r\n        },\r\n        device(deviceId: string, accountId: string, options?: Audit.Options<Audit.DeviceEntry>) {\r\n            return new AuditRequest<Audit.DeviceEntry>(rev, `/network/audit/accounts/${accountId}/devices/${deviceId}`, 'Device', options);\r\n        },\r\n        /**\r\n        * Operations on Video Records (create, delete, etc)\r\n        */\r\n        accountVideos(accountId: string, options?: Audit.Options<Audit.VideoEntry>) {\r\n            return new AuditRequest<Audit.VideoEntry>(rev, `/network/audit/accounts/${accountId}/videos`, 'Videos', options);\r\n        },\r\n        video(videoId: string, accountId: string, options?: Audit.Options<Audit.VideoEntry>) {\r\n            return new AuditRequest<Audit.VideoEntry>(rev, `/network/audit/accounts/${accountId}/videos/${videoId}`, 'Video', options);\r\n        },\r\n        /**\r\n        * Operations on Webcast Records (create, delete, etc)\r\n        */\r\n        accountWebcasts(accountId: string, options?: Audit.Options<Audit.WebcastEntry>) {\r\n            return new AuditRequest<Audit.WebcastEntry>(rev, `/network/audit/accounts/${accountId}/scheduledEvents`, 'Webcasts', options);\r\n        },\r\n        webcast(eventId: string, accountId: string, options?: Audit.Options<Audit.WebcastEntry>) {\r\n            return new AuditRequest<Audit.WebcastEntry>(rev, `/network/audit/accounts/${accountId}/scheduledEvents/${eventId}`, `Webcast`, options);\r\n        },\r\n        /**\r\n        * All operations a single user has made\r\n        */\r\n        principal(userId: string, accountId: string, options?: Audit.Options<Audit.Entry<string>>) {\r\n            return new AuditRequest<Audit.Entry<string>>(rev, `/network/audit/accounts/${accountId}/principals/${userId}`, 'Principal', options);\r\n        }\r\n    };\r\n\r\n    return auditAPI;\r\n}\r\n\r\nfunction asValidDate(val: string | Date | undefined, defaultValue: Date): Date {\r\n    if (!val) {\r\n        return defaultValue;\r\n    }\r\n    if (!(val instanceof Date)) {\r\n        val = new Date(val);\r\n    }\r\n    return isNaN(val.getTime())\r\n    ? defaultValue\r\n    : val;\r\n}\r\n\r\nfunction parseEntry<T extends Audit.Entry>(line: Record<string, any>): T {\r\n    return {\r\n        messageKey: line['MessageKey'],\r\n        entityKey: line['EntityKey'],\r\n        when: line['When'],\r\n        principal: tryParseJson(line['Principal']) || {},\r\n        message: tryParseJson(line['Message']) || {},\r\n        currentState: tryParseJson(line['CurrentState']) || {},\r\n        previousState: tryParseJson(line['PreviousState']) || {}\r\n    } as T;\r\n}\r\n\r\nexport class AuditRequest<T extends Audit.Entry> implements Rev.ISearchRequest<T> {\r\n    current: number;\r\n    total: number;\r\n    done: boolean;\r\n    options: Required<Omit<Audit.Options<T>, 'toDate' | 'fromDate'>>;\r\n    private params: {\r\n        toDate?: string,\r\n        fromDate?: string,\r\n        nextContinuationToken?: string;\r\n    }\r\n    private _req: () => Promise<Rev.Response<any>>;\r\n    constructor(rev: RevClient, endpoint: string, label: string, options: Audit.Options<T> = {}) {\r\n        const {\r\n            fromDate,\r\n            toDate,\r\n            ...opts\r\n        } = options;\r\n\r\n        this.options = {\r\n            maxResults: Infinity,\r\n            onProgress: (items: T[], current: number, total: number) => {\r\n                rev.log('debug', `loading ${label}, ${current} of ${total}...`);\r\n            },\r\n            ...opts\r\n        };\r\n\r\n        let _toDate = asValidDate(toDate, new Date());\r\n        // default to one year older than toDate\r\n        const defaultFrom = new Date(_toDate.setFullYear(_toDate.getFullYear() - 1));\r\n        let _fromDate = asValidDate(fromDate, defaultFrom);\r\n\r\n        if (_toDate < _fromDate) {\r\n            [_toDate, _fromDate] = [_fromDate, _toDate];\r\n        }\r\n\r\n        this.params = {\r\n            toDate: _toDate.toISOString(),\r\n            fromDate: _fromDate.toISOString()\r\n        };\r\n\r\n        this._req = () => rev.request('GET', endpoint, { params: this.params }, { responseType: 'text' });\r\n\r\n        this.current = 0;\r\n        this.total = Infinity;\r\n        this.done = false;\r\n    }\r\n    async nextPage() {\r\n        const {\r\n            maxResults,\r\n            onProgress\r\n        } = this.options;\r\n\r\n        let current = this.current;\r\n\r\n        const response = await this._req();\r\n        const {\r\n            body,\r\n            headers\r\n        } = response;\r\n\r\n        let items = parseCSV(body)\r\n            .map(line => parseEntry<T>(line));\r\n\r\n        if (!this.total) {\r\n            const totalRecords = parseInt(headers.get('totalRecords') || '', 10);\r\n            this.total = Math.min(totalRecords || 0, maxResults);\r\n        }\r\n\r\n        Object.assign(this.params, {\r\n            nextContinuationToken: headers.get('nextContinuationToken') || undefined,\r\n            fromDate: headers.get('nextfromDate') || undefined\r\n        });\r\n        if (!this.params.nextContinuationToken) {\r\n            this.done = true;\r\n        }\r\n\r\n        // limit results to specified max results\r\n        if (current + items.length >= maxResults) {\r\n            const delta = maxResults - current;\r\n            items = items.slice(0, delta);\r\n            this.done = true;\r\n        }\r\n\r\n        onProgress(items, current, this.total);\r\n\r\n        this.current += items.length;\r\n\r\n        if (this.current === this.total) {\r\n            this.done = true;\r\n        }\r\n\r\n        return {\r\n            current,\r\n            total: this.total,\r\n            done: this.done,\r\n            items\r\n        };\r\n    }\r\n    /**\r\n     * Go through all pages of results and return as an array.\r\n     * TIP: Use the {maxResults} option to limit the maximum number of results\r\n     *\r\n     */\r\n    async exec(): Promise<T[]> {\r\n        const results: T[] = [];\r\n        // use async iterator\r\n        for await (let hit of this) {\r\n            results.push(hit);\r\n        }\r\n        return results;\r\n    }\r\n    async* [Symbol.asyncIterator]() {\r\n        do {\r\n            const {\r\n                items\r\n            } = await this.nextPage();\r\n\r\n            for await (let hit of items) {\r\n                yield hit;\r\n            }\r\n        } while (!this.done);\r\n    }\r\n}\r\n","/**\r\n * There are slight differences in handling browser and node.js environments.\r\n * This folder wraps all components that get polyfilled in node.js, as well as\r\n * allowing uploading a video from the local filesystem on node.js\r\n */\r\nimport { isBlobLike } from '../utils';\r\nimport type { UploadFileOptions, FileUploadPayloadInternal, FileUploadType } from '../utils/file-utils';\r\n\r\n/**\r\n * used to sign the verifier in OAuth workflow\r\n */\r\nasync function hmacSign(message: string, secret: string) {\r\n    const enc = new TextEncoder();\r\n    const cryptoKey = await crypto.subtle\r\n        .importKey(\r\n            'raw',\r\n            enc.encode(secret),\r\n            { name: 'HMAC', hash: 'SHA-256' },\r\n            true,\r\n            ['sign']\r\n        );\r\n    const signed = await crypto.subtle.sign('HMAC', cryptoKey, enc.encode(message));\r\n    return btoa(String.fromCharCode(...new Uint8Array(signed)));\r\n}\r\n\r\nexport default {\r\n    AbortController: globalThis.AbortController,\r\n    AbortSignal: globalThis.AbortSignal,\r\n    fetch: (...args: Parameters<typeof fetch>) => globalThis.fetch(...args),\r\n    FormData: globalThis.FormData,\r\n    Headers: globalThis.Headers,\r\n    Request: globalThis.Request,\r\n    Response: globalThis.Response,\r\n    hmacSign,\r\n    /**\r\n     *\r\n     * @param file\r\n     * @param filename\r\n     * @param contentType\r\n     * @returns\r\n     */\r\n    async parseFileUpload(file: FileUploadType, options: UploadFileOptions): Promise<FileUploadPayloadInternal> {\r\n        let {\r\n            filename,\r\n            contentType,\r\n            contentLength\r\n        } = options;\r\n\r\n        if (isBlobLike(file)) {\r\n            const { type, name, size } = <File>file;\r\n            if (type && !contentType) {\r\n                contentType = type;\r\n            }\r\n            if (name && !filename) {\r\n                filename = name;\r\n            }\r\n            if (size && !contentLength) {\r\n                contentLength = size;\r\n            }\r\n\r\n            return {\r\n                file,\r\n                options: {\r\n                    ...options,\r\n                    filename,\r\n                    contentType,\r\n                    contentLength\r\n                }\r\n            };\r\n        }\r\n        throw new TypeError('Only Blob / Files are supported for file uploads. Pass a File/Blob object');\r\n    },\r\n    appendFileToForm(form: FormData, fieldName: string, payload: FileUploadPayloadInternal) {\r\n        const {\r\n            file,\r\n            options: {\r\n                filename\r\n            }\r\n        } = payload;\r\n        form.append(fieldName, file as Blob, filename);\r\n    },\r\n    async prepareUploadHeaders(form: FormData, headers: Headers, useChunkedTransfer?: boolean) {\r\n        // nothing - this is used for fixing node's form-data behavior\r\n    }\r\n};\r\n","import type { RevClient } from '../rev-client';\r\nimport { Auth, OAuth } from '../types/auth';\r\nimport polyfills from '../interop';\r\n\r\nexport default function authAPIFactory(rev: RevClient) {\r\n    const { hmacSign } = polyfills;\r\n    const authAPI = {\r\n        async loginToken(apiKey: string, secret: string): Promise<Auth.LoginResponse> {\r\n            return rev.post('/api/v2/authenticate', {\r\n                apiKey,\r\n                secret\r\n            });\r\n        },\r\n        async extendSessionToken(apiKey: string): Promise<Auth.ExtendResponse> {\r\n            return rev.post(`/api/v2/auth/extend-session-timeout/${apiKey}`);\r\n        },\r\n        async logoffToken(apiKey: string): Promise<void> {\r\n            return rev.delete(`/api/v2/tokens/${apiKey}`);\r\n        },\r\n        async loginUser(username: string, password: string): Promise<Auth.UserLoginResponse> {\r\n            return rev.post('/api/v2/user/login', {\r\n                username,\r\n                password\r\n            });\r\n        },\r\n        async logoffUser(userId: string): Promise<void> {\r\n            return rev.post('/api/v2/user/logoff', { userId });\r\n        },\r\n        async extendSessionUser(userId: string): Promise<Auth.ExtendResponse> {\r\n            return rev.post('/api/v2/user/extend-session-timeout', { userId });\r\n        },\r\n        async verifySession(): Promise<void> {\r\n            return rev.get('/api/v2/user/session');\r\n        },\r\n\r\n        /**\r\n         * @deprecated - use logoffUser - put here because it's a common misspelling\r\n         */\r\n        get logoutUser() { return authAPI.logoffUser; },\r\n        /**\r\n         * @deprecated - use logoffToken - put here because it's a common misspelling\r\n         */\r\n        get logoutToken() { return authAPI.logoffToken; },\r\n\r\n        /**\r\n         *\r\n         * @param config OAuth signing settings, retrieved from Rev Admin -> Security -> API Keys page\r\n         * @param state optional state to pass back to redirectUri once complete\r\n         * @returns A valid oauth flow URL\r\n         */\r\n        async buildOAuthAuthenticateURL(config: OAuth.Config, state: string = '1'): Promise<string> {\r\n            const RESPONSE_TYPE = 'code';\r\n\r\n            const {\r\n                oauthApiKey,\r\n                oauthSecret,\r\n                redirectUri\r\n            } = config;\r\n\r\n            const timestamp = new Date();\r\n            if (isNaN(timestamp.getTime())) {\r\n                throw new TypeError(`Invalid Timestamp ${timestamp}`);\r\n            }\r\n            const verifier = `${oauthApiKey}::${timestamp.toISOString()}`;\r\n\r\n            const signature = await hmacSign(oauthSecret, verifier);\r\n\r\n            const url = new URL('/oauth/authorization', rev.url);\r\n            url.search = new URLSearchParams({\r\n                'apiKey': oauthApiKey,\r\n                'signature': signature,\r\n                'verifier': verifier,\r\n                'redirect_uri': redirectUri,\r\n                'response_type': RESPONSE_TYPE,\r\n                'state': state,\r\n            }).toString();\r\n\r\n            return `${url}`;\r\n        },\r\n        parseOAuthRedirectResponse(url: string | URL): OAuth.RedirectResponse {\r\n            const parsedUrl = typeof url === 'string'\r\n                ? new URL(url)\r\n                : url;\r\n\r\n            const authCode: string = parsedUrl.searchParams.get('auth_code') || '';\r\n            const state: string = parsedUrl.searchParams.get('state') || '';\r\n            const error: string | undefined = parsedUrl.searchParams.get('error') || undefined;\r\n\r\n            return {\r\n                isSuccess: !error,\r\n                authCode,\r\n                state,\r\n                error\r\n            };\r\n        },\r\n        async loginOAuth(config: OAuth.Config, authCode: string): Promise<OAuth.LoginResponse> {\r\n            const GRANT_AUTH = 'authorization_code';\r\n\r\n            const {\r\n                oauthApiKey: apiKey,\r\n                redirectUri\r\n            } = config;\r\n\r\n            // sometimes the authCode can get mangled, with the pluses in the code\r\n            // being replaced by spaces. This is just to make sure that isn't a problem\r\n            authCode = authCode.replace(/ /g, '+');\r\n\r\n            // COMBAK I don't think it matters if rev-client is logged in and passing Authorization headers or not.\r\n            return rev.post('/oauth/token', {\r\n                authCode,\r\n                apiKey,\r\n                redirectUri,\r\n                grandType: GRANT_AUTH\r\n            });\r\n        },\r\n        async extendSessionOAuth(config: OAuth.Config, refreshToken: string): Promise<OAuth.LoginResponse> {\r\n            const GRANT_REFRESH = 'refresh_token';\r\n\r\n            const {\r\n                oauthApiKey: apiKey,\r\n                redirectUri\r\n            } = config;\r\n\r\n            return rev.post('/oauth/token', {\r\n                apiKey,\r\n                refreshToken,\r\n                grantType: GRANT_REFRESH\r\n            });\r\n        }\r\n    };\r\n\r\n    return authAPI;\r\n}\r\n","import type { RevClient } from '../rev-client';\r\nimport type { Category } from '../types';\r\n\r\nexport default function categoryAPIFactory(rev: RevClient) {\r\n    const categoryAPI = {\r\n        async create(category: Category.CreateRequest): Promise<Category.CreateResponse> {\r\n            return rev.post('/api/v2/categories', category, { responseType: 'json' });\r\n        },\r\n        async details(categoryId: string): Promise<Category.Details> {\r\n            return rev.get(`/api/v2/categories/${categoryId}`, undefined, { responseType: 'json' });\r\n        },\r\n        async update(categoryId: string, category: Category.EditRequest): Promise<void> {\r\n            return rev.put(`/api/v2/categories/${categoryId}`, category);\r\n        },\r\n        async delete(categoryId: string): Promise<void> {\r\n            return rev.delete(`/api/v2/categories/${categoryId}`);\r\n        },\r\n        /**\r\n         * get list of categories in system\r\n         * @see {@link https://revdocs.vbrick.com/reference#getcategories}\r\n         */\r\n        async list(parentCategoryId?: string, includeAllDescendants?: boolean): Promise<Category[]> {\r\n            // only pass parameters if defined\r\n            const payload: Record<string, any> = Object.assign(\r\n                { },\r\n                parentCategoryId && { parentCategoryId },\r\n                includeAllDescendants != undefined && { includeAllDescendants }\r\n            );\r\n            const { categories } = await rev.get('/api/v2/categories', payload, { responseType: 'json' });\r\n            return categories;\r\n        }\r\n    };\r\n    return categoryAPI;\r\n}\r\n","import type { RevClient } from '../rev-client';\r\nimport type { Channel, Rev } from '../types';\r\n\r\nexport default function channelAPIFactory(rev: RevClient) {\r\n    const channelAPI = {\r\n        async create(channel: Channel.CreateRequest): Promise<string> {\r\n            const {channelId} = await rev.post('/api/v2/channels', channel, { responseType: 'json' });\r\n            return channelId;\r\n        },\r\n        async update(channelId: string, channel: Channel.CreateRequest): Promise<void> {\r\n            return rev.put(`/api/v2/channels/${channelId}`, channel);\r\n        },\r\n        async delete(channelId: string): Promise<void> {\r\n            return rev.delete(`/api/v2/channels/${channelId}`);\r\n        },\r\n        /**\r\n         * get list of channels in system\r\n         * @see {@link https://revdocs.vbrick.com/reference/getchannels}\r\n         */\r\n        list(start: number = 0, options: Channel.SearchOptions = {}): ChannelListRequest {\r\n            return new ChannelListRequest(rev, start, options);\r\n        },\r\n        async addMembers(channelId: string, members: Channel.Member[]) {\r\n            const operations = members\r\n                .map(member => {\r\n                    return { op: 'add', path: '/Members/-', value: member };\r\n                });\r\n            await rev.patch(`/api/v2/channels/${channelId}`, operations);\r\n        },\r\n        async removeMembers(channelId: string, members: Array<string | Channel.Member>) {\r\n            const operations = members\r\n                .map(member => {\r\n                    const entityId = typeof member === 'string'\r\n                        ? member\r\n                        : member.id;\r\n\r\n                    return { op: 'remove', path: '/Members', value: entityId };\r\n                });\r\n\r\n            await rev.patch(`/api/v2/channels/${channelId}`, operations);\r\n        }\r\n    };\r\n    return channelAPI;\r\n}\r\n\r\nexport class ChannelListRequest implements Rev.ISearchRequest<Channel.SearchHit> {\r\n    currentPage: number;\r\n    current: number;\r\n    total: number;\r\n    done: boolean;\r\n    options: Required<Pick<Channel.SearchOptions, 'maxResults' | 'onProgress' | 'pageSize'>>;\r\n    private _req: () => Promise<Channel.SearchHit[]>;\r\n    constructor(rev: RevClient, start: number = 0, options: Channel.SearchOptions = {}) {\r\n        this.options = {\r\n            maxResults: Infinity,\r\n            pageSize: 10,\r\n            onProgress: (items: Channel.SearchHit[], current: number, total: number) => {\r\n                rev.log('debug', `loading channels, ${current} of ${total}...`);\r\n            },\r\n            ...options\r\n        };\r\n\r\n        this.current = 0;\r\n        this.total = Infinity;\r\n        this.done = false;\r\n        this.currentPage = start;\r\n\r\n        this._req = () => {\r\n            const params = {\r\n                page: this.currentPage,\r\n                count: this.options.pageSize\r\n            };\r\n            return rev.get('/api/v2/channels', params, { responseType: 'json' });\r\n        }\r\n\r\n    }\r\n    async nextPage() {\r\n        const {\r\n            maxResults,\r\n            onProgress\r\n        } = this.options;\r\n\r\n        let current = this.current;\r\n\r\n        let items: Channel.SearchHit[] = await this._req();\r\n\r\n        if (!Array.isArray(items) || items.length == 0) {\r\n            this.done = true;\r\n            items = [];\r\n        }\r\n\r\n        if (current + items.length >= maxResults) {\r\n            const delta = maxResults - current;\r\n            items = items.slice(0, delta);\r\n            this.done = true;\r\n        }\r\n        this.total = current + items.length;\r\n\r\n        onProgress(items, current, this.total);\r\n\r\n        this.current += items.length;\r\n        this.currentPage += 1;\r\n\r\n        return {\r\n            current,\r\n            total: this.total,\r\n            done: this.done,\r\n            items\r\n        };\r\n    }\r\n    /**\r\n     * Go through all pages of results and return as an array.\r\n     * TIP: Use the {maxResults} option to limit the maximum number of results\r\n     *\r\n     */\r\n    async exec(): Promise<Channel.SearchHit[]> {\r\n        const results: Channel.SearchHit[] = [];\r\n        // use async iterator\r\n        for await (let hit of this) {\r\n            results.push(hit);\r\n        }\r\n        return results;\r\n    }\r\n    async* [Symbol.asyncIterator]() {\r\n        do {\r\n            const {\r\n                items\r\n            } = await this.nextPage();\r\n\r\n            for await (let hit of items) {\r\n                yield hit;\r\n            }\r\n        } while (!this.done);\r\n    }\r\n}\r\n","import type { RevClient } from '../rev-client';\r\n\r\nimport type { Device } from '../types';\r\n\r\nexport default function deviceAPIFactory(rev: RevClient) {\r\n    const deviceAPI = {\r\n        async listDMEs(): Promise<Device.DmeDetails[]> {\r\n            const response = await rev.get('/api/v2/devices/dmes');\r\n            return response.devices;\r\n        },\r\n        async listZoneDevices(): Promise<Device.ZoneDevice[]> {\r\n            const response = await rev.get('/api/v2/zonedevices');\r\n            return response.devices;\r\n        },\r\n        async listPresentationProfiles(): Promise<Device.PresentationProfile[]> {\r\n            return rev.get('/api/v2/presentation-profiles');\r\n        },\r\n        async add(dme: Device.CreateDMERequest) {\r\n            return rev.post('/api/v2/devices/dmes', dme);\r\n        },\r\n        async healthStatus(deviceId: string): Promise<Device.DmeHealthStatus> {\r\n            return rev.get(`/api/v2/devices/dmes/${deviceId}/health-status`);\r\n        },\r\n        async delete(deviceId: string) {\r\n            return rev.delete(`/api/v2/devices/dmes/${deviceId}`);\r\n        }\r\n    };\r\n    return deviceAPI;\r\n}\r\n","import { ScrollError } from '../rev-error';\r\nimport type { RevClient } from '../rev-client';\r\nimport type { Rev } from '../types';\r\n\r\nexport async function decodeBody(response: Response, acceptType?: string | null) {\r\n    const contentType = response.headers.get('Content-Type') || acceptType || '';\r\n\r\n    if (contentType.startsWith('application/json')) {\r\n        try {\r\n            return await response.json();\r\n        } catch (err) {\r\n            // keep going\r\n        }\r\n    }\r\n\r\n    if (contentType.startsWith('text')) {\r\n        return response.text();\r\n    }\r\n\r\n    return response.body;\r\n}\r\n\r\n/**\r\n * Interface to iterate through results from API endpoints that return results in pages.\r\n * Use in one of three ways:\r\n * 1) Get all results as an array: await request.exec() == <array>\r\n * 2) Get each page of results: await request.nextPage() == { current, total, items: <array> }\r\n * 3) Use for await to get all results one at a time: for await (let hit of request) { }\r\n */\r\nexport class SearchRequest<T> implements Rev.ISearchRequest<T> {\r\n    current: number;\r\n    total: number;\r\n    done: boolean;\r\n    options: Required<Rev.SearchOptions<T>>;\r\n    private _req: (...args: any[]) => any;\r\n    private query: Record<string, any>;\r\n    constructor(\r\n        rev: RevClient,\r\n        searchDefinition: Rev.SearchDefinition<T>,\r\n        query: Record<string, any> = {},\r\n        options: Rev.SearchOptions<T> = {}\r\n    ) {\r\n        // make copy of query object\r\n        const {\r\n            scrollId: _ignore,\r\n            ...queryOpt\r\n        } = query;\r\n        this.query = queryOpt;\r\n\r\n        const {\r\n            hitsKey\r\n        } = searchDefinition;\r\n\r\n        this.options = {\r\n            maxResults: Infinity,\r\n            onProgress: (items, current, total) => {\r\n                rev.log('debug', `searching ${hitsKey}, ${current}-${current + items.length} of ${total}...`);\r\n            },\r\n            onScrollExpired: (err => { throw err; }),\r\n            ...options\r\n        };\r\n\r\n        this._req = this._makeReqFunction(rev, searchDefinition);\r\n\r\n        this.current = 0;\r\n        this.total = Infinity;\r\n        this.done = false;\r\n    }\r\n    private _makeReqFunction(rev: RevClient, searchDefinition: Rev.SearchDefinition) {\r\n        const {\r\n            endpoint,\r\n            totalKey,\r\n            hitsKey,\r\n            isPost = false,\r\n            transform\r\n        } = searchDefinition;\r\n\r\n        return async (query: Record<string, any>) => {\r\n            const response: Record<string, any> = isPost\r\n                ? await rev.post(endpoint, query, { responseType: 'json' })\r\n                : await rev.get(endpoint, query, { responseType: 'json' });\r\n\r\n            let {\r\n                scrollId,\r\n                [totalKey]: total,\r\n                [hitsKey]: rawItems = [],\r\n                statusCode,\r\n                statusDescription\r\n            } = response;\r\n\r\n            const items: T[] = (typeof transform === 'function')\r\n                ? await Promise.resolve(transform(rawItems))\r\n                : rawItems;\r\n\r\n            return {\r\n                scrollId,\r\n                total,\r\n                pageCount: rawItems.count,\r\n                items,\r\n                statusCode,\r\n                statusDescription\r\n            };\r\n        };\r\n    }\r\n    /**\r\n     * Get the next page of results from API\r\n     */\r\n    async nextPage(): Promise<Rev.SearchPage<T>> {\r\n        const {\r\n            maxResults,\r\n            onProgress,\r\n            onScrollExpired\r\n        } = this.options;\r\n\r\n        if (this.done) {\r\n            return {\r\n                current: this.total,\r\n                total: this.total,\r\n                done: this.done,\r\n                items: []\r\n            };\r\n        }\r\n\r\n        let {\r\n            scrollId,\r\n            total = 0,\r\n            items = [],\r\n            pageCount = 0,\r\n            statusCode,\r\n            statusDescription\r\n        } = await this._req(this.query);\r\n\r\n        this.total = Math.min(total, maxResults);\r\n\r\n        this.query.scrollId = scrollId;\r\n        if (!scrollId) {\r\n            this.done = true;\r\n        }\r\n\r\n        const current = this.current;\r\n\r\n        // limit results to specified max results\r\n        if (current + pageCount >= maxResults) {\r\n            const delta = maxResults - current;\r\n            items = items.slice(0, delta);\r\n            this.done = true;\r\n        }\r\n\r\n        onProgress(items, current, this.total);\r\n\r\n        // check for error response\r\n        if (statusCode >= 400 && !!statusDescription) {\r\n            this.done = true;\r\n            const err = new ScrollError(statusCode, statusDescription);\r\n            onScrollExpired(err);\r\n        }\r\n\r\n        this.current += pageCount;\r\n\r\n        if (this.current === this.total) {\r\n            this.done = true;\r\n        }\r\n\r\n        return {\r\n            current,\r\n            total: this.total,\r\n            done: this.done,\r\n            items\r\n        };\r\n    }\r\n    /**\r\n     * Go through all pages of results and return as an array.\r\n     * TIP: Use the {maxResults} option to limit the maximum number of results\r\n     *\r\n     */\r\n    async exec(): Promise<T[]> {\r\n        const results: T[] = [];\r\n        // use async iterator\r\n        for await (let hit of this) {\r\n            results.push(hit);\r\n        }\r\n        return results;\r\n    }\r\n    async* [Symbol.asyncIterator]() {\r\n        do {\r\n            const {\r\n                items\r\n            } = await this.nextPage();\r\n\r\n            for await (let hit of items) {\r\n                yield hit;\r\n            }\r\n        } while (!this.done);\r\n    }\r\n}\r\n","import type { RevClient } from '../rev-client';\r\nimport type { Group, Rev, User } from '../types';\r\nimport { SearchRequest } from '../utils/request-utils';\r\n\r\nexport default function groupAPIFactory(rev: RevClient) {\r\n    const groupAPI = {\r\n        /**\r\n         * Create a group. Returns the resulting Group ID\r\n         * @param {{name: string, userIds: string[], roleIds: string[]}} group\r\n         * @returns {Promise<string>}\r\n         */\r\n        async create(group: Group.CreateRequest) {\r\n            const { groupId } = await rev.post('/api/v2/groups', group);\r\n            return groupId;\r\n        },\r\n        async delete(groupId: string) {\r\n            await rev.delete(`/api/v2/groups/${groupId}`);\r\n        },\r\n        async details(groupId: string): Promise<Group.Details> {\r\n            return rev.get(`/api/v2/groups/${groupId}`);\r\n        },\r\n        /**\r\n         *\r\n         * @param {string} [searchText]\r\n         * @param {Rev.SearchOptions<{Id: string, Name: string}>} [options]\r\n         */\r\n        search(searchText?: string, options: Rev.SearchOptions<Group.SearchHit> = { }) {\r\n            const searchDefinition = {\r\n                endpoint: '/api/v2/search/access-entity',\r\n                totalKey: 'totalEntities',\r\n                hitsKey: 'accessEntities',\r\n                transform: (hits: Group.RawSearchHit[]) => hits.map(formatGroupSearchHit)\r\n            };\r\n            const query: Record<string, any> = { type: 'group' };\r\n            if (searchText) {\r\n                query.q = searchText;\r\n            }\r\n            return new SearchRequest<Group.SearchHit>(rev, searchDefinition, query, options);\r\n        },\r\n        list(options: Rev.SearchOptions<Group.SearchHit> = { }) {\r\n            return groupAPI.search(undefined, options);\r\n        },\r\n        listUsers(groupId: string, options: Rev.SearchOptions<string> = { }) {\r\n            const searchDefinition = {\r\n                endpoint: `/api/v2/search/groups/${groupId}/users`,\r\n                totalKey: 'totalUsers',\r\n                hitsKey: 'userIds'\r\n            };\r\n            return new SearchRequest<string>(rev, searchDefinition, undefined, options);\r\n        },\r\n        /**\r\n         * get all users in a group with full details\r\n         * @param groupId\r\n         * @param options\r\n         * @returns\r\n         */\r\n        listUserDetails(groupId: string, options: Rev.SearchOptions<User & { error?: Error }> = { }) {\r\n            const searchDefinition = {\r\n                endpoint: `/api/v2/search/groups/${groupId}/users`,\r\n                totalKey: 'totalUsers',\r\n                hitsKey: 'userIds',\r\n                transform: async (userIds: string[]) => {\r\n                    const result: User[] = [];\r\n                    for (let userId of userIds) {\r\n                        const out: User & {error: Error} = { userId } as any;\r\n                        try {\r\n                            const details = await rev.user.details(userId);\r\n                            Object.assign(out, details);\r\n                        } catch (error: any) {\r\n                            out.error = error;\r\n                        }\r\n                        result.push(out);\r\n                    }\r\n                    return result;\r\n                }\r\n            };\r\n            return new SearchRequest<User & {userId: string, error?: Error}>(rev, searchDefinition, undefined, options);\r\n        }\r\n    };\r\n    return groupAPI;\r\n}\r\n\r\nfunction formatGroupSearchHit(hit: Group.RawSearchHit): Group.SearchHit {\r\n    return {\r\n        id: hit.Id,\r\n        name: hit.Name,\r\n        entityType: hit.EntityType\r\n    };\r\n}\r\n","import type { RevClient } from '../rev-client';\r\nimport type { Playlist } from '../types/playlist';\r\nimport { isPlainObject } from '../utils';\r\n\r\nexport default function playlistAPIFactory(rev: RevClient) {\r\n    const playlistAPI = {\r\n        async create(name: string, videoIds: string[]): Promise<string> {\r\n            const payload = {\r\n                name,\r\n                videoIds\r\n            };\r\n            const { playlistId } = await rev.post('/api/v2/playlists', payload, { responseType: 'json' });\r\n            return playlistId;\r\n        },\r\n        async update(playlistId: string, actions: Playlist.UpdateAction[]): Promise<void> {\r\n            const payload = {\r\n                playlistVideoDetails: actions\r\n            };\r\n            return rev.put(`/api/v2/playlists/${playlistId}`, payload);\r\n        },\r\n        async updateFeatured(actions: Playlist.UpdateAction[]): Promise<void> {\r\n            const payload = {\r\n                playlistVideoDetails: actions\r\n            };\r\n            return rev.put(`/api/v2/playlists/featured-playlist`, payload);\r\n        },\r\n        async delete(playlistId: string): Promise<void> {\r\n            return rev.delete(`/api/v2/playlists/${playlistId}`);\r\n        },\r\n        /**\r\n         * get list of playlists in system.\r\n         * NOTE: return type is slightly different than API documentation\r\n         * @see {@link https://revdocs.vbrick.com/reference#getplaylists}\r\n         */\r\n        async list(): Promise<Playlist.List> {\r\n            // ensure raw response is in consistent format\r\n            function parsePlaylist(entry: Record<string, string> & { videos: any; }): Playlist {\r\n                return {\r\n                    id: entry.id ?? entry.playlistId ?? entry.featurePlaylistId ?? entry.featuredPlaylist,\r\n                    name: entry.name ?? entry.playlistName,\r\n                    playbackUrl: entry.playbackUrl,\r\n                    videos: entry.videos ?? entry.Videos as any\r\n                };\r\n            }\r\n\r\n            const rawResult = await rev.get('/api/v2/playlists', { responseType: 'json' });\r\n            // rawResult may return in strange format, so cleanup and return consistent output\r\n\r\n            const hasFeatured = !Array.isArray(rawResult);\r\n\r\n            const rawPlaylists = hasFeatured\r\n                ? rawResult.playlists\r\n                : rawResult;\r\n\r\n\r\n            const output: Playlist.List = {\r\n                playlists: rawPlaylists.map(parsePlaylist)\r\n            };\r\n\r\n            if (hasFeatured) {\r\n                if (isPlainObject(rawResult.featuredPlaylist)) {\r\n                    output.featuredPlaylist = parsePlaylist(rawResult.featuredPlaylist);\r\n                } else if (Array.isArray(rawResult.videos)) {\r\n                    output.featuredPlaylist = parsePlaylist(rawResult);\r\n                }\r\n            }\r\n            return output;\r\n        }\r\n    };\r\n    return playlistAPI;\r\n}\r\n","import { Recording } from '..';\r\nimport type { RevClient } from '../rev-client';\r\nimport { Video } from '../types/video';\r\nimport { isPlainObject } from '../utils';\r\n\r\nexport default function recordingAPIFactory(rev: RevClient) {\r\n    const recordingAPI = {\r\n        async startVideoConferenceRecording(sipAddress: string, sipPin: string, title?: string): Promise<string> {\r\n            const { videoId } = await rev.post('/api/v2/vc/start-recording', { title, sipAddress, sipPin }, { responseType: 'json' });\r\n            return videoId;\r\n        },\r\n        async getVideoConferenceStatus(videoId: string): Promise<Video.StatusEnum> {\r\n            const { status } = await rev.get(`/api/v2/vc/recording-status/${videoId}`, undefined, { responseType: 'json' });\r\n            return status;\r\n        },\r\n        async stopVideoConferenceRecording(videoId: string): Promise<string> {\r\n            const payload = { videoId };\r\n            const result = await rev.post(`/api/v2/vc/stop-recording`, payload, { responseType: 'json' });\r\n            return isPlainObject<{ message: string; }>(result)\r\n                ? result.message\r\n                : result;\r\n        },\r\n        async startPresentationProfileRecording(request: Recording.PresentationProfileRequest): Promise<string> {\r\n            const { scheduledRecordingId } = await rev.post('/api/v2/pp/start-recording', request, { responseType: 'json' });\r\n            return scheduledRecordingId;\r\n        },\r\n        async getPresentationProfileStatus(recordingId: string): Promise<Recording.PresentationProfileStatus> {\r\n            const result = await rev.get(`/api/v2/pp/recording-status/${recordingId}`, undefined, { responseType: 'json' });\r\n            return result;\r\n        },\r\n        async stopPresentationProfileRecording(recordingId: string): Promise<Recording.StopPresentationProfileResponse> {\r\n            const payload = { scheduledRecordingId: recordingId };\r\n            const result = await rev.get(`/api/v2/vc/recording-status`, payload, { responseType: 'json' });\r\n            return result;\r\n        }\r\n    };\r\n    return recordingAPI;\r\n}\r\n","import polyfills from '../interop';\r\nimport { isBlobLike } from '.';\r\nimport type { RevClient } from '../rev-client';\r\nimport type { Rev } from '../types';\r\n\r\nexport type FileUploadType = string | File | Blob | AsyncIterable<any>;\r\nexport interface UploadFileOptions {\r\n    /** specify filename of video as reported to Rev */\r\n    filename?: string;\r\n    /** specify content type of video */\r\n    contentType?: string;\r\n    /** if content length is known this will avoid needing to detect it */\r\n    contentLength?: number;\r\n    /** node-only - bypass dealing with content length and just upload as transfer-encoding: chunked */\r\n    useChunkedTransfer?: boolean;\r\n}\r\nexport interface FileUploadPayloadInternal {\r\n    file: FileUploadType;\r\n    options: UploadFileOptions;\r\n}\r\n\r\nexport const mimeTypes = {\r\n    '.7z': 'application/x-7z-compressed',\r\n    '.asf': 'video/x-ms-asf',\r\n    '.avi': 'video/x-msvideo',\r\n    '.csv': 'text/csv',\r\n    '.doc': 'application/msword',\r\n    '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\r\n    '.f4v': 'video/x-f4v',\r\n    '.flv': 'video/x-flv',\r\n    '.gif': 'image/gif',\r\n    '.jpg': 'image/jpeg',\r\n    '.m4a': 'audio/mp4',\r\n    '.m4v': 'video/x-m4v',\r\n    '.mkv': 'video/x-matroska',\r\n    '.mov': 'video/quicktime',\r\n    '.mp3': 'audio/mpeg',\r\n    '.mp4': 'video/mp4',\r\n    '.mpg': 'video/mpeg',\r\n    '.pdf': 'application/pdf',\r\n    '.png': 'image/png',\r\n    '.ppt': 'application/vnd.ms-powerpoint',\r\n    '.pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\r\n    '.rar': 'application/x-rar-compressed',\r\n    '.srt': 'application/x-subrip',\r\n    '.svg': 'image/svg+xml',\r\n    '.swf': 'application/x-shockwave-flash',\r\n    '.ts': 'video/mp2t',\r\n    '.txt': 'text/plain',\r\n    '.wmv': 'video/x-ms-wmv',\r\n    '.xls': 'application/vnd.ms-excel',\r\n    '.xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n    '.zip': 'application/zip',\r\n    '.mks': 'video/x-matroska',\r\n    '.mts': 'model/vnd.mts',\r\n    '.wma': 'audio/x-ms-wma'\r\n};\r\n\r\nexport function getMimeForExtension(extension: string = '', defaultType = 'video/mp4') {\r\n    extension = extension.toLowerCase();\r\n    if (extension && (extension in mimeTypes)) {\r\n        return mimeTypes[extension as keyof typeof mimeTypes];\r\n    }\r\n    return defaultType;\r\n}\r\n\r\nexport function getExtensionForMime(contentType: string, defaultExtension = '.mp4') {\r\n    const match = contentType && Object.entries(mimeTypes)\r\n        .find(([ext, mime]) => contentType.startsWith((mime)));\r\n    return match\r\n        ? match[0]\r\n        : defaultExtension;\r\n\r\n}\r\n\r\nfunction sanitizeFileUpload(payload: FileUploadPayloadInternal) {\r\n    let {\r\n        file,\r\n        options: {\r\n            filename = 'upload',\r\n            contentType = ''\r\n        }\r\n    } = payload;\r\n\r\n    // sanitize content type\r\n    if (contentType === 'application/octet-stream') {\r\n        contentType = '';\r\n    }\r\n    if (/charset/.test(contentType)) {\r\n        contentType = contentType.replace(/;?.*charset.*$/, '');\r\n    }\r\n    let name = filename.replace('\\.[^\\.]+$', '');\r\n    let ext = filename.replace(name, '');\r\n    if (!ext) {\r\n        ext = getExtensionForMime(contentType);\r\n    }\r\n    filename = `${name}${ext}`;\r\n    if (!contentType) {\r\n        contentType = getMimeForExtension(ext);\r\n    }\r\n    if (isBlobLike(file) && file.type !== contentType) {\r\n        payload.file = file.slice(0, file.size, contentType);\r\n    }\r\n    Object.assign(payload.options, {\r\n        filename,\r\n        contentType\r\n    });\r\n    return payload;\r\n}\r\n\r\nexport function appendJSONToForm(form: FormData, fieldName: string, data: any) {\r\n    form.append(fieldName, JSON.stringify(data));\r\n}\r\n\r\n/**\r\n * This method is included for isometric support of uploading files in node.js and browser.\r\n * @param form FormData instance\r\n * @param fieldName name of field to add to form\r\n * @param file the file. Can be Blob or File on browser. On node.js it can be anything the 'form-data' package will accept\r\n * @param options optional filename, contentType and contentLength of upload. Otherwise it will try to guess based on input\r\n */\r\nexport async function appendFileToForm(form: FormData, fieldName: string, file: FileUploadType, options: UploadFileOptions = { }): Promise<UploadFileOptions> {\r\n    const opts: UploadFileOptions = {\r\n        filename: 'upload',\r\n        contentType: '',\r\n        ...options\r\n    };\r\n    let payload = await polyfills.parseFileUpload(file, opts);\r\n    payload = sanitizeFileUpload(payload);\r\n    await polyfills.appendFileToForm(form, fieldName, payload);\r\n    return payload.options;\r\n}\r\n\r\nexport async function prepareFileUploadHeaders(form: FormData, headers: Headers, useChunkedTransfer?: boolean) {\r\n    await polyfills.prepareUploadHeaders(form, headers, useChunkedTransfer);\r\n}\r\n\r\n/**\r\n * helper to upload multipart forms with files attached.\r\n * This is to work around issues with node.js's FormData implementation\r\n * @param rev Rev Client\r\n * @param method\r\n * @param endpoint\r\n * @param form\r\n * @param useChunkedTransfer\r\n * @param options\r\n * @returns\r\n */\r\nexport async function uploadMultipart(\r\n    rev: RevClient,\r\n    method: Rev.HTTPMethod,\r\n    endpoint: string,\r\n    form: FormData,\r\n    useChunkedTransfer: boolean | UploadFileOptions = false,\r\n    options: Rev.RequestOptions = { }\r\n) {\r\n    const {\r\n        headers: optHeaders\r\n    } = options;\r\n\r\n    useChunkedTransfer = typeof useChunkedTransfer === 'boolean'\r\n        ? useChunkedTransfer\r\n        : !!useChunkedTransfer?.useChunkedTransfer;\r\n\r\n    // coerce to Headers object, may be undefined\r\n    const headers = new polyfills.Headers(optHeaders);\r\n    // switches to transfer encoding upload if necessary\r\n    await prepareFileUploadHeaders(form, headers, useChunkedTransfer);\r\n\r\n    options.headers = headers;\r\n    const { body } = await rev.request(method, endpoint, form, options);\r\n    return body;\r\n}\r\n","import type { RevClient } from '../rev-client';\r\nimport { Video } from '../types';\r\nimport { appendFileToForm, appendJSONToForm, FileUploadType, UploadFileOptions, uploadMultipart } from '../utils/file-utils';\r\nimport polyfills from '../interop';\r\n\r\nexport default function uploadAPIFactory(rev: RevClient) {\r\n    const { FormData } = polyfills;\r\n    const uploadAPI = {\r\n        /**\r\n         * Upload a video, and returns the resulting video ID\r\n         */\r\n        async video(\r\n            file: FileUploadType,\r\n            metadata: Video.UploadMetadata = { uploader: rev.session.username ?? '' },\r\n            options: UploadFileOptions = { }): Promise<string> {\r\n\r\n            // prepare payload\r\n            const form = new FormData();\r\n\r\n            // at bare minimum the uploader needs to be defined\r\n            if (!metadata.uploader) {\r\n                // if using username login then uploader can be set to current user\r\n                const defaultUsername = rev.session.username;\r\n                if (defaultUsername) {\r\n                    metadata.uploader = defaultUsername;\r\n                } else {\r\n                    throw new TypeError('metadata must include uploader parameter');\r\n                }\r\n            }\r\n\r\n            // add video metadata to body (as json)\r\n            appendJSONToForm(form, 'video', metadata);\r\n\r\n            // append file (works around some node's form-data library quirks)\r\n            const filePayload = await appendFileToForm(form, 'VideoFile', file, options);\r\n\r\n            rev.log('info', `Uploading ${filePayload.filename} (${filePayload.contentType})`);\r\n\r\n            const { videoId } = await uploadMultipart(rev, 'POST', '/api/v2/uploads/videos', form, filePayload);\r\n            return videoId;\r\n        },\r\n        async transcription(videoId: string, file: FileUploadType, language: string = 'en', options: UploadFileOptions & { contentType?: 'text/plain' | 'application/x-subrip'; } = { }): Promise<void> {\r\n            const opts = {\r\n                // acceptable are text/plain and application/x-subrip\r\n                contentType: 'application/x-subrip',\r\n                filename: 'subtitle.srt'\r\n            };\r\n\r\n            // validate language\r\n            // TODO put this in a constants file somewhere\r\n            const supportedLanguages = ['de', 'en', 'en-gb', 'es-es', 'es-419', 'es', 'fr', 'fr-ca', 'id', 'it', 'ko', 'ja', 'nl', 'no', 'pl', 'pt', 'pt-br', 'th', 'tr', 'fi', 'sv', 'ru', 'el', 'zh', 'zh-tw', 'zh-cmn-hans'];\r\n\r\n            let lang = language.toLowerCase();\r\n            if (!supportedLanguages.includes(lang)) {\r\n                // try removing trailing language specifier\r\n                lang = lang.slice(2);\r\n                if (!supportedLanguages.includes(lang)) {\r\n                    throw new TypeError(`Invalid language ${language} - supported values are ${supportedLanguages.join(', ')}`);\r\n                }\r\n            }\r\n\r\n            const form = new FormData();\r\n\r\n            const filePayload = await appendFileToForm(form, 'File', file, options);\r\n            const metadata = {\r\n                files: [\r\n                    { language: lang, fileName: filePayload.filename }\r\n                ]\r\n            };\r\n            appendJSONToForm(form, 'TranscriptionFiles', metadata);\r\n\r\n            rev.log('info', `Uploading transcription to ${videoId} (${lang} ${filePayload.filename} (${filePayload.contentType})`);\r\n\r\n            await uploadMultipart(rev, 'POST', `/api/v2/transcription-files/${videoId}`, form, filePayload);\r\n        }\r\n    };\r\n    return uploadAPI;\r\n}\r\n","import type { RevClient } from '../rev-client';\r\nimport type { Rev, User } from '../types';\r\nimport { SearchRequest } from '../utils/request-utils';\r\n\r\nexport default function userAPIFactory(rev: RevClient) {\r\n    const userAPI = {\r\n        /**\r\n         * get the list of roles available in the system (with role name and id)\r\n         */\r\n        get roles() {\r\n            return rev.admin.roles;\r\n        },\r\n        /**\r\n         * Create a new User in Rev\r\n         * @param user\r\n         * @returns the User ID of the created user\r\n         */\r\n        async create(user: User.Request): Promise<string> {\r\n            const { userId } = await rev.post('/api/v2/users', user);\r\n            return userId;\r\n        },\r\n        async delete(userId: string): Promise<void> {\r\n            await rev.delete(`/api/v2/users/${userId}`);\r\n        },\r\n        async details(userId: string) {\r\n            return rev.get<User>(`/api/v2/users/${userId}`);\r\n        },\r\n        /**\r\n         */\r\n        async getByUsername(username: string) {\r\n            return rev.get<User>(`/api/v2/users/${username}`, { type: 'username' });\r\n        },\r\n        /**\r\n         */\r\n        async getByEmail(email: string) {\r\n            return rev.get<User>(`/api/v2/users/${email}`, { type: 'email' });\r\n        },\r\n        /**\r\n         * use PATCH API to add user to the specified group\r\n         * https://revdocs.vbrick.com/reference#edituserdetails\r\n         * @param {string} userId id of user in question\r\n         * @param {string} groupId\r\n         * @returns {Promise<void>}\r\n         */\r\n        async addToGroup(userId: string, groupId: string) {\r\n            const operations = [\r\n                { op: 'add', path: '/GroupIds/-', value: groupId }\r\n            ];\r\n            await rev.patch(`/api/v2/users/${userId}`, operations);\r\n        },\r\n        /**\r\n         * use PATCH API to add user to the specified group\r\n         * https://revdocs.vbrick.com/reference#edituserdetails\r\n         * @param {string} userId id of user in question\r\n         * @param {string} groupId\r\n         * @returns {Promise<void>}\r\n         */\r\n        async removeFromGroup(userId: string, groupId: string) {\r\n            const operations = [\r\n                { op: 'remove', path: '/GroupIds', value: groupId }\r\n            ];\r\n            await rev.patch(`/api/v2/users/${userId}`, operations);\r\n        },\r\n        /**\r\n         * search for users based on text query. Leave blank to return all users.\r\n         *\r\n         * @param {string} [searchText]\r\n         * @param {Rev.SearchOptions<{Id: string, Name: string}>} [options]\r\n         */\r\n        search(searchText?: string, options: Rev.SearchOptions<User.SearchHit> = { }): SearchRequest<User.SearchHit> {\r\n            const searchDefinition = {\r\n                endpoint: '/api/v2/search/access-entity',\r\n                totalKey: 'totalEntities',\r\n                hitsKey: 'accessEntities',\r\n                /**\r\n                 * the result of this search is uppercase keys. This transforms them to camelcase to match other API responses\r\n                 */\r\n                transform: (items: User.RawSearchHit[]) => items.map(formatUserSearchHit)\r\n            };\r\n            const query: Record<string, any> = { type: 'user' };\r\n            if (searchText) {\r\n                query.q = searchText;\r\n            }\r\n            return new SearchRequest(rev, searchDefinition, query, options);\r\n        }\r\n    };\r\n    return userAPI;\r\n}\r\n\r\nfunction formatUserSearchHit(hit: User.RawSearchHit): User.SearchHit {\r\n    return {\r\n        userId: hit.Id,\r\n        entityType: hit.EntityType,\r\n        email: hit.Email,\r\n        firstname: hit.FirstName,\r\n        lastname: hit.LastName,\r\n        username: hit.UserName\r\n    };\r\n}\r\n","import type { RevClient } from '../rev-client';\r\nimport { Video, Rev } from '../types';\r\nimport { SearchRequest } from '../utils/request-utils';\r\n\r\nexport default function videoAPIFactory(rev: RevClient) {\r\n    const videoAPI = {\r\n        /**\r\n         * This is an example of using the video Patch API to only update a single field\r\n         * @param videoId\r\n         * @param title\r\n         */\r\n        async setTitle(videoId: string, title: string) {\r\n            const payload = [{ op: 'add', path: '/Title', value: title }];\r\n            await rev.patch(`/api/v2/videos/${videoId}`, payload);\r\n        },\r\n        /**\r\n         * get processing status of a video\r\n         * @param videoId\r\n         */\r\n        async status(videoId: string): Promise<Video.StatusResponse> {\r\n            return rev.get(`/api/v2/videos/${videoId}/status`);\r\n        },\r\n        async details(videoId: string): Promise<Video.Details> {\r\n            return rev.get(`/api/v2/videos/${videoId}/details`);\r\n        },\r\n        get upload() {\r\n            return rev.upload.video;\r\n        },\r\n        /**\r\n         * search for videos, return as one big list. leave blank to get all videos in the account\r\n         */\r\n        search(query: Video.SearchOptions = { }, options: Rev.SearchOptions<Video.SearchHit> = { }): SearchRequest<Video.SearchHit> {\r\n            const searchDefinition = {\r\n                endpoint: '/api/v2/videos/search',\r\n                totalKey: 'totalVideos',\r\n                hitsKey: 'videos'\r\n            };\r\n            const request = new SearchRequest<Video.SearchHit>(rev, searchDefinition, query, options);\r\n            return request;\r\n        },\r\n        /**\r\n         * Example of using the video search API to search for videos, then getting\r\n         * the details of each video\r\n         * @param query\r\n         * @param options\r\n         */\r\n        searchDetailed(query: Video.SearchOptions = { }, options: Rev.SearchOptions<Video.SearchHit & (Video.Details | { error?: Error })> = { }) {\r\n            const searchDefinition = {\r\n                endpoint: '/api/v2/videos/search',\r\n                totalKey: 'totalVideos',\r\n                hitsKey: 'videos',\r\n                transform: async (videos: Video.SearchHit[]) => {\r\n                    const result = [];\r\n                    for (let rawVideo of videos) {\r\n                        const out: Video.SearchHit & (Video.Details & { error?: Error; }) = rawVideo as any;\r\n                        try {\r\n                            const details = await videoAPI.details(rawVideo.id);\r\n                            Object.assign(out, details);\r\n                        } catch (error: any) {\r\n                            out.error = error;\r\n                        }\r\n                        result.push(out);\r\n                    }\r\n                    return result;\r\n                }\r\n            };\r\n            const request = new SearchRequest<Video.SearchHit>(rev, searchDefinition, query, options);\r\n            return request;\r\n        },\r\n        async playbackInfo(videoId: string): Promise<Video.Playback> {\r\n            const { video } = await rev.get(`/api/v2/videos/${videoId}/playback-url`);\r\n            return video;\r\n        },\r\n        async download(videoId: string) {\r\n            const response = await rev.request<ReadableStream>('GET', `/api/v2/videos/${videoId}/download`, undefined, {\r\n                responseType: 'stream'\r\n            });\r\n            return response;\r\n        },\r\n        async downloadTranscription(videoId: string, language: string) {\r\n            const { body } = await rev.request<Blob>('GET', `/api/v2/videos/${videoId}/transcription-files/${language}`, undefined, { responseType: 'blob' });\r\n            return body;\r\n        },\r\n        async downloadThumbnail(query: string | { videoId?: string, imageId?: string; }) {\r\n            const {\r\n                videoId = '',\r\n                imageId = ''\r\n            } = typeof query === 'string'\r\n                    ? { imageId: query }\r\n                    : query;\r\n\r\n            if (!(videoId || imageId)) {\r\n                throw new TypeError('No video/image specified to download');\r\n            }\r\n\r\n            let thumbnailUrl = imageId\r\n                ? `/api/v2/media/videos/thumbnails/${imageId}.jpg`\r\n                // allow getting from api if only know the video ID\r\n                : (await videoAPI.playbackInfo(videoId)).thumbnailUrl;\r\n\r\n            const { body } = await rev.request<Blob>('GET', thumbnailUrl, undefined, { responseType: 'blob' });\r\n            return body;\r\n        }\r\n    };\r\n    return videoAPI;\r\n}\r\n","import { Rev } from '..';\r\nimport type { RevClient } from '../rev-client';\r\nimport { Webcast } from '../types/webcast';\r\nimport { SearchRequest } from '../utils/request-utils';\r\n\r\nexport default function webcastAPIFactory(rev: RevClient) {\r\n    const webcastAPI = {\r\n        async list(options: Webcast.ListRequest = { }): Promise<Webcast[]> {\r\n            return rev.get('/api/v2/scheduled-events', options, { responseType: 'json' });\r\n        },\r\n        search(query: Webcast.SearchRequest, options?: Rev.SearchOptions<Webcast>): SearchRequest<Webcast> {\r\n            const searchDefinition = {\r\n                endpoint: `/api/v2/search/scheduled-events`,\r\n                totalKey: 'total',\r\n                hitsKey: 'events',\r\n                isPost: true\r\n            };\r\n            return new SearchRequest<Webcast>(rev, searchDefinition, query, options);\r\n        },\r\n        async create(event: Webcast.CreateRequest): Promise<string> {\r\n            const { eventId } = await rev.post(`/api/v2/scheduled-events`, event);\r\n            return eventId;\r\n        },\r\n        async details(eventId: string): Promise<Webcast.Details> {\r\n            return rev.get(`/api/v2/scheduled-events/${eventId}`);\r\n        },\r\n        async edit(eventId: string, event: Webcast.CreateRequest): Promise<void> {\r\n            return rev.put(`/api/v2/scheduled-events/${eventId}`, event);\r\n        },\r\n        // async patch - not yet implemented\r\n        async delete(eventId: string): Promise<void> {\r\n            return rev.delete(`/api/v2/scheduled-events/${eventId}`);\r\n        },\r\n        async editAccess(eventId: string, entities: Webcast.EditAttendeesRequest): Promise<void> {\r\n            return rev.put(`/api/v2/scheduled-events/${eventId}/access-control`, entities);\r\n        },\r\n        attendees(eventId: string, runNumber?: number, options?: Rev.SearchOptions<Webcast.PostEventSession>): SearchRequest<Webcast.PostEventSession> {\r\n            const searchDefinition = {\r\n                endpoint: `/api/v2/scheduled-events/${eventId}/post-event-report`,\r\n                totalKey: 'totalSessions',\r\n                hitsKey: 'sessions'\r\n            };\r\n            const query = runNumber && runNumber >= 0 ? { runNumber } : { };\r\n            return new SearchRequest<Webcast.PostEventSession>(rev, searchDefinition, query, options);\r\n        },\r\n        async questions(eventId: string, runNumber?: number): Promise<Webcast.Question[]> {\r\n            const query = (runNumber ?? -1) >= 0 ? { runNumber } : {};\r\n            return rev.get(`/api/v2/scheduled-events/${eventId}/questions`, query, { responseType: 'json' });\r\n        },\r\n        async pollResults(eventId: string, runNumber?: number): Promise<Webcast.PollResults[]> {\r\n            const query = (runNumber ?? -1) >= 0 ? { runNumber } : {};\r\n            return rev.get(`/api/v2/scheduled-events/${eventId}/poll-results`, query, { responseType: 'json' });\r\n        },\r\n        async comments(eventId: string, runNumber?: number): Promise<Webcast.Comment[]> {\r\n            const query = (runNumber ?? -1) >= 0 ? { runNumber } : {};\r\n            return rev.get(`/api/v2/scheduled-events/${eventId}/comments`, query, { responseType: 'json' });\r\n        },\r\n        async status(eventId: string): Promise<Webcast.Status> {\r\n            return rev.get(`/api/v2/scheduled-events/${eventId}/status`);\r\n        },\r\n        async playbackUrl(eventId: string, options: Webcast.PlaybackUrlRequest = { }): Promise<Webcast.Playback[]> {\r\n            const {\r\n                ip,\r\n                userAgent\r\n            } = options;\r\n\r\n            const query = ip ? { ip } : undefined;\r\n\r\n            const requestOptions: Rev.RequestOptions = {\r\n                responseType: 'json'\r\n            };\r\n            if (userAgent) {\r\n                requestOptions.headers = { 'User-Agent': userAgent };\r\n            }\r\n\r\n            return rev.get(`/api/v2/scheduled-events/${eventId}/playback-url`, query, requestOptions);\r\n        },\r\n        async startEvent(eventId: string, preProduction: boolean = false): Promise<void> {\r\n            await rev.put(`/api/v2/scheduled-events/${eventId}/start`, { preProduction });\r\n        },\r\n        async stopEvent(eventId: string, preProduction: boolean = false): Promise<void> {\r\n            await rev.delete(`/api/v2/scheduled-events/${eventId}/start`, { preProduction });\r\n        },\r\n        async startBroadcast(eventId: string): Promise<void> {\r\n            await rev.put(`/api/v2/scheduled-events/${eventId}/broadcast`);\r\n        },\r\n        async stopBroadcast(eventId: string): Promise<void> {\r\n            await rev.delete(`/api/v2/scheduled-events/${eventId}/broadcast`);\r\n        },\r\n        async startRecord(eventId: string): Promise<void> {\r\n            await rev.put(`/api/v2/scheduled-events/${eventId}/record`);\r\n        },\r\n        async stopRecord(eventId: string): Promise<void> {\r\n            await rev.delete(`/api/v2/scheduled-events/${eventId}/record`);\r\n        },\r\n        async linkVideo(eventId: string, videoId: string, autoRedirect: boolean = true) {\r\n            const payload = {\r\n                videoId,\r\n                redirectVod: autoRedirect\r\n            };\r\n            return rev.put(`/api/v2/scheduled-events/${eventId}/linked-video`, payload);\r\n        },\r\n        async unlinkVideo(eventId: string) {\r\n            return rev.delete(`/api/v2/scheduled-events/${eventId}/linked-video`);\r\n        }\r\n    };\r\n    return webcastAPI;\r\n}\r\n","import type { RevClient } from '../rev-client';\r\nimport { Zone } from '../types/zone';\r\n\r\nexport default function zonesAPIFactory(rev: RevClient) {\r\n    const zonesAPI = {\r\n        async list(): Promise<{ defaultZone: Zone, zones: Zone[]; }> {\r\n            return rev.get(`/api/v2/zones`, undefined, { responseType: 'json' });\r\n        },\r\n        async flatList(): Promise<Zone.FlatZone[]> {\r\n            const {\r\n                defaultZone,\r\n                zones\r\n            } = await zonesAPI.list();\r\n            const flatZones: Omit<Zone, 'childZones'>[] = [defaultZone];\r\n            function recursiveAdd(inZone: Zone) {\r\n                const {\r\n                    childZones = [],\r\n                    ...zone\r\n                } = inZone;\r\n\r\n                flatZones.push(zone);\r\n                childZones.forEach(recursiveAdd);\r\n            }\r\n            zones.forEach(recursiveAdd);\r\n            return flatZones;\r\n        },\r\n        async create(zone: Zone.CreateRequest): Promise<string> {\r\n            const { zoneId } = await rev.post(`/api/v2/zones`, zone, { responseType: 'json' });\r\n            return zoneId;\r\n        },\r\n        async edit(zoneId: string, zone: Zone.CreateRequest): Promise<void> {\r\n            return rev.put(`/api/v2/zones/${zoneId}`, zone);\r\n        },\r\n        delete(zoneId: string) {\r\n            return rev.delete(`/api/v2/zones/${zoneId}`);\r\n        },\r\n        get devices() {\r\n            return rev.device.listZoneDevices;\r\n        }\r\n    };\r\n    return zonesAPI;\r\n}\r\n","import type { RevClient } from './rev-client';\r\nimport type { Rev } from './types';\r\nimport { isPlainObject, sleep } from './utils';\r\nimport interop from './interop';\r\n\r\nconst ONE_MINUTE = 1000 * 60;\r\n\r\n// obsfucate credentials to avoid accidental disclosure\r\nconst _credentials = Symbol('credentials');\r\n\r\ninterface LoginResponse {\r\n    token: string,\r\n    expiration: string,\r\n    userId?: string,\r\n    refreshToken?: string,\r\n    apiKey?: string;\r\n}\r\n\r\nexport interface RevSession {\r\n    token?: string;\r\n    expires: Date;\r\n    readonly isExpired: boolean;\r\n    readonly username: string | undefined;\r\n    readonly keepAlive?: SessionKeepAlive;\r\n    login(): Promise<void>;\r\n    extend(): Promise<void>;\r\n    logoff(): Promise<void>;\r\n    verify(): Promise<boolean>;\r\n    lazyExtend(options?: Rev.KeepAliveOptions): Promise<boolean>;\r\n}\r\n\r\nclass SessionKeepAlive {\r\n    private readonly _session!: SessionBase;\r\n    private controller?: AbortController;\r\n    extendOptions: Required<Rev.KeepAliveOptions>;\r\n    error?: undefined | Error;\r\n    private _isExtending: boolean = false;\r\n    constructor(session: SessionBase, options: Rev.KeepAliveOptions = { }) {\r\n        // TODO verify values?\r\n        this.extendOptions = {\r\n            extendThresholdMilliseconds: 3 * ONE_MINUTE,\r\n            keepAliveInterval: 5 * ONE_MINUTE,\r\n            verify: true,\r\n            ...options\r\n        };\r\n\r\n        Object.defineProperties(this, {\r\n            _session: {\r\n                get: () => session,\r\n                enumerable: false\r\n            }\r\n        });\r\n    }\r\n    getNextExtendTime() {\r\n        const { expires } = this._session;\r\n        if (!expires) {\r\n            return 0;\r\n        }\r\n        const {\r\n            keepAliveInterval: interval,\r\n            extendThresholdMilliseconds: threshold\r\n        } = this.extendOptions;\r\n\r\n        const timeTillExpiration = expires.getTime() - Date.now();\r\n        // clamp range to within 0 and max interval\r\n        return Math.max(0, Math.min(timeTillExpiration - threshold, interval));\r\n    }\r\n    private async _poll() {\r\n        const { _session: session } = this;\r\n        // force stop other poll process if already polling\r\n        // keep reference to controller in case of reset\r\n        const controller = this._reset();\r\n        const { signal } = controller;\r\n\r\n        while (session.isConnected && !signal.aborted) {\r\n            const nextExtendTime = this.getNextExtendTime();\r\n            await sleep(nextExtendTime, signal);\r\n\r\n            // check if poll was aborted. if so don't try to extend\r\n            if (signal.aborted) {\r\n                break;\r\n            }\r\n\r\n            // extend session\r\n            // possible this can throw an error\r\n            try {\r\n                // extending may re-login, so pause poll resets for now\r\n                this._isExtending = true;\r\n                await session.lazyExtend(this.extendOptions);\r\n            } catch (err: any) {\r\n                // swallow error, but signal stopped using abort controller\r\n                controller.abort();\r\n                this.error = err;\r\n            } finally {\r\n                this._isExtending = false;\r\n            }\r\n        }\r\n    }\r\n    start() {\r\n        if (this._isExtending) {\r\n            return;\r\n        }\r\n        this._poll();\r\n    }\r\n    stop() {\r\n        if (this._isExtending) {\r\n            return;\r\n        }\r\n        if (this.controller) {\r\n            this.controller.abort();\r\n        }\r\n    }\r\n    private _reset() {\r\n        this.error = undefined;\r\n        this._isExtending = false;\r\n        const oldController = this.controller;\r\n        this.controller = new interop.AbortController();\r\n\r\n        // stop previous poll\r\n        if (oldController) {\r\n            oldController.abort();\r\n        }\r\n        return this.controller;\r\n    }\r\n    get isAlive() {\r\n        return this.controller && !this.controller.signal.aborted;\r\n    }\r\n}\r\n\r\nabstract class SessionBase implements RevSession {\r\n    token?: string;\r\n    expires: Date;\r\n    protected readonly rev!: RevClient;\r\n    protected readonly [_credentials]: Rev.Credentials;\r\n    readonly keepAlive?: SessionKeepAlive;\r\n    constructor(rev: RevClient, credentials: Rev.Credentials, keepAliveOptions?: boolean | Rev.KeepAliveOptions) {\r\n        this.expires = new Date();\r\n\r\n        if (keepAliveOptions === true) {\r\n            this.keepAlive = new SessionKeepAlive(this);\r\n        } else if (isPlainObject(keepAliveOptions)) {\r\n            this.keepAlive = new SessionKeepAlive(this, keepAliveOptions);\r\n        }\r\n\r\n        // add as private member\r\n        Object.defineProperties(this, {\r\n            rev: {\r\n                get() { return rev; },\r\n                enumerable: false\r\n            },\r\n            [_credentials]: {\r\n                get() { return credentials; },\r\n                enumerable: false\r\n            }\r\n        });\r\n    }\r\n    async login() {\r\n        this.token = undefined;\r\n        this.expires = new Date();\r\n\r\n        const {\r\n            expiration,\r\n            ...session\r\n        } = await this._login();\r\n\r\n        Object.assign(this, session);\r\n        this.expires = new Date(expiration);\r\n        if (this.keepAlive) {\r\n            this.keepAlive.start();\r\n        }\r\n    }\r\n    async extend() {\r\n        const { expiration } = await this._extend();\r\n        this.expires = new Date(expiration);\r\n    }\r\n    async logoff() {\r\n        if (this.keepAlive) {\r\n            this.keepAlive.stop();\r\n        }\r\n        try {\r\n            await this._logoff();\r\n        } finally {\r\n            this.token = undefined;\r\n            this.expires = new Date();\r\n        }\r\n    }\r\n    async verify() {\r\n        try {\r\n            await this.rev.auth.verifySession();\r\n            return true;\r\n        } catch (err) {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     * @returns wasExtended - whether session was extended / re-logged in\r\n     */\r\n    async lazyExtend(options: Rev.KeepAliveOptions = { }) {\r\n        const {\r\n            extendThresholdMilliseconds: threshold = 3 * ONE_MINUTE,\r\n            verify: shouldVerify = true\r\n        } = options;\r\n\r\n        const { expires } = this;\r\n        const timeLeft = expires\r\n            ? expires.getTime() - Date.now()\r\n            : -1;\r\n\r\n        // login if session expired\r\n        if (timeLeft <= 0) {\r\n            await this.login();\r\n            return true;\r\n        }\r\n\r\n        // extend if within extend window\r\n        if (timeLeft > threshold) {\r\n            try {\r\n                await this.extend();\r\n                // successful extend, nothing more to do\r\n                return true;\r\n            } catch (error) {\r\n                this.rev.log('warn', 'Error extending session - re-logging in', error);\r\n            }\r\n            // check if valid session if plenty of time left\r\n        } else if (!shouldVerify || await this.verify()) {\r\n            // valid, no change\r\n            return false;\r\n        }\r\n\r\n        // if reached here then need to re-login\r\n        await this.login();\r\n        return true;\r\n    }\r\n    /**\r\n     * check if expiration time of session has passed\r\n     */\r\n    get isExpired() {\r\n        const { expires } = this;\r\n        if (!expires) {\r\n            return true;\r\n        }\r\n        return Date.now() > expires.getTime();\r\n    }\r\n    /**\r\n     * returns true if session isn't expired and has a token\r\n     */\r\n    get isConnected() {\r\n        return this.token && !this.isExpired;\r\n    }\r\n    get username() {\r\n        return this[_credentials].username;\r\n    }\r\n    protected abstract _login(): Promise<LoginResponse>;\r\n    protected abstract _extend(): Promise<{ expiration: string; }>;\r\n    protected abstract _logoff(): Promise<void>;\r\n}\r\n\r\nexport class OAuthSession extends SessionBase {\r\n    refreshToken?: string;\r\n    async _login() {\r\n        const { oauthConfig, authCode } = this[_credentials];\r\n        if (!oauthConfig || !authCode) {\r\n            throw new TypeError('OAuth Config / auth code not specified');\r\n        }\r\n        const {\r\n            accessToken: token,\r\n            expiration,\r\n            refreshToken,\r\n            userId\r\n        } = await this.rev.auth.loginOAuth(oauthConfig, authCode);\r\n        return { token, expiration, refreshToken, userId };\r\n    }\r\n    async _extend() {\r\n        const { [_credentials]: { oauthConfig } } = this;\r\n\r\n        const {\r\n            // other API calls call this \"token\" instead of \"accessToken\", hence the rename\r\n            accessToken: token,\r\n            expiration,\r\n            refreshToken\r\n        } = await this.rev.auth.extendSessionOAuth(oauthConfig as any, <string>this.refreshToken);\r\n\r\n        // unlike other extend methods this updates the token + refreshToken each time\r\n        Object.assign(this, { token, refreshToken });\r\n        return { expiration };\r\n    }\r\n    async _logoff() {\r\n        // nothing to do\r\n        return;\r\n    }\r\n}\r\n\r\nexport class UserSession extends SessionBase {\r\n    userId?: string;\r\n    async _login() {\r\n        const { username, password } = this[_credentials];\r\n        if (!username || !password) {\r\n            throw new TypeError('username/password not specified');\r\n        }\r\n        const {\r\n            token,\r\n            expiration,\r\n            id: userId\r\n        } = await this.rev.auth.loginUser(username, password);\r\n        return { token, expiration, userId };\r\n    }\r\n    async _extend() {\r\n        const { userId } = this;\r\n\r\n        return this.rev.auth.extendSessionUser(<string>userId);\r\n    }\r\n    async _logoff() {\r\n        const { userId } = this;\r\n\r\n        return this.rev.auth.logoffUser(<string>userId);\r\n    }\r\n}\r\n\r\nexport class ApiKeySession extends SessionBase {\r\n    async _login() {\r\n        const { apiKey, secret } = this[_credentials];\r\n        if (!apiKey || !secret) {\r\n            throw new TypeError('apiKey/secret not specified');\r\n        }\r\n        return this.rev.auth.loginToken(apiKey, secret);\r\n    }\r\n    async _extend() {\r\n        const { apiKey } = this[_credentials];\r\n        return this.rev.auth.extendSessionToken(<string>apiKey);\r\n    }\r\n    async _logoff() {\r\n        const { apiKey } = this[_credentials];\r\n        return this.rev.auth.logoffToken(<string>apiKey);\r\n    }\r\n}\r\n\r\nexport function createSession(rev: RevClient, credentials: Rev.Credentials, keepAliveOptions?: boolean | Rev.KeepAliveOptions) {\r\n    const isOauthLogin = credentials.authCode && credentials.oauthConfig;\r\n    const isUsernameLogin = credentials.username && credentials.password;\r\n    const isTokenLogin = credentials.apiKey && credentials.secret;\r\n\r\n    if (isOauthLogin) {\r\n        return new OAuthSession(rev, credentials, keepAliveOptions);\r\n    }\r\n    if (isTokenLogin) {\r\n        return new ApiKeySession(rev, credentials, keepAliveOptions);\r\n    }\r\n    if (isUsernameLogin) {\r\n        return new UserSession(rev, credentials, keepAliveOptions);\r\n    }\r\n    throw new TypeError('Must specify credentials (username+password, apiKey+secret or oauthConfig+authCode)');\r\n}\r\n","import { RevError } from './rev-error';\r\nimport { isPlainObject, retry } from './utils';\r\nimport * as api from './api';\r\nimport polyfills from './interop';\r\nimport { Rev } from './types';\r\nimport { decodeBody } from './utils/request-utils';\r\nimport { createSession } from './session';\r\nimport type { RevSession } from './session';\r\n\r\ntype PayloadType = { [key: string]: any; } | Record<string, any> | any[];\r\n\r\nexport class RevClient {\r\n    url: string;\r\n    logEnabled: boolean;\r\n    session: RevSession;\r\n    readonly admin!: ReturnType<typeof api.admin>;\r\n    readonly audit!: ReturnType<typeof api.audit>;\r\n    readonly auth!: ReturnType<typeof api.auth>;\r\n    readonly category!: ReturnType<typeof api.category>;\r\n    readonly device!: ReturnType<typeof api.device>;\r\n    readonly group!: ReturnType<typeof api.group>;\r\n    readonly playlist!: ReturnType<typeof api.playlist>;\r\n    readonly recording!: ReturnType<typeof api.recording>;\r\n    readonly upload!: ReturnType<typeof api.upload>;\r\n    readonly user!: ReturnType<typeof api.user>;\r\n    readonly video!: ReturnType<typeof api.video>;\r\n    readonly webcast!: ReturnType<typeof api.webcast>;\r\n    readonly zones!: ReturnType<typeof api.zones>;\r\n    constructor(options: Rev.Options) {\r\n        if (!isPlainObject(options) || !options.url) {\r\n            throw new TypeError('Missing configuration options for client - url and username/password or apiKey/secret');\r\n        }\r\n        const {\r\n            url,\r\n            log,\r\n            logEnabled = false,\r\n            keepAlive = true,\r\n            ...credentials\r\n        } = options;\r\n\r\n        // get just the origin of provided url\r\n        const urlObj = new URL(url);\r\n        this.url = urlObj.origin;\r\n\r\n        // will throw error if credentials are invalid\r\n        this.session = createSession(this, credentials, keepAlive);\r\n\r\n        // add logging functionality\r\n        this.logEnabled = !!logEnabled;\r\n        if (log) {\r\n            this.log = (severity: Rev.LogSeverity, ...args: any[]) => {\r\n                if (!this.logEnabled) {\r\n                    return;\r\n                }\r\n                log(severity, ...args);\r\n            };\r\n        }\r\n\r\n        // add all API endpoints\r\n        Object.defineProperties(this, {\r\n            admin: { value: api.admin(this), writable: false },\r\n            audit: { value: api.audit(this), writable: false },\r\n            auth: { value: api.auth(this), writable: false },\r\n            category: { value: api.category(this), writable: false },\r\n            channel: { value: api.channel(this), writable: false },\r\n            device: { value: api.device(this), writable: false },\r\n            group: { value: api.group(this), writable: false },\r\n            playlist: { value: api.playlist(this), writable: false },\r\n            recording: { value: api.recording(this), writable: false },\r\n            upload: { value: api.upload(this), writable: false },\r\n            user: { value: api.user(this), writable: false },\r\n            video: { value: api.video(this), writable: false },\r\n            webcasts: { value: api.webcast(this), writable: false },\r\n            zones: { value: api.zones(this), writable: false }\r\n        });\r\n    }\r\n    /**\r\n     * make a REST request\r\n     */\r\n    async request<T = any>(method: Rev.HTTPMethod, endpoint: string, data: any = undefined, options: Rev.RequestOptions = { }): Promise<Rev.Response<T>> {\r\n        const url = new URL(endpoint, this.url);\r\n        // ensure url matches Rev url, to avoid sending authorization header elsewhere\r\n        if (url.origin !== this.url) {\r\n            throw new TypeError(`Invalid endpoint - must be relative to ${this.url}`);\r\n        }\r\n\r\n        const {\r\n            headers: optHeaders,\r\n            responseType,\r\n            ...requestOpts\r\n        } = options;\r\n\r\n        // setup headers for JSON communication (by default)\r\n        const headers = new polyfills.Headers(optHeaders);\r\n\r\n        // add authorization header from stored token\r\n        if (this.session.token && !headers.has('Authorization')) {\r\n            headers.set('Authorization', `VBrick ${this.session.token}`);\r\n        }\r\n        if (headers.get('Authorization') === '') {\r\n            // if Auth is explicitly set to '' then remove from list\r\n            headers.delete('Authorization');\r\n        }\r\n\r\n        const fetchOptions: RequestInit = {\r\n            mode: 'cors',\r\n            method,\r\n            ...requestOpts,\r\n            headers\r\n        };\r\n\r\n        // default to JSON request payload, but allow it to be overridden\r\n        let shouldSetAsJSON = !headers.has('Content-Type');\r\n\r\n        // add provided data to request body or as query string parameters\r\n\r\n        if (data) {\r\n            if (['POST', 'PUT', 'PATCH'].includes(method.toUpperCase())) {\r\n                if (typeof data === 'string') {\r\n                    fetchOptions.body = data;\r\n                } else if (data instanceof polyfills.FormData) {\r\n                    shouldSetAsJSON = false;\r\n                    fetchOptions.body = data;\r\n                } else if (isPlainObject(data) || Array.isArray(data)) {\r\n                    fetchOptions.body = JSON.stringify(data);\r\n                } else {\r\n                    fetchOptions.body = data;\r\n                }\r\n            } else if (isPlainObject(data)) {\r\n                // add values to query string of URL\r\n                for (let [key, value] of Object.entries(data)) {\r\n                    url.searchParams.append(key, value);\r\n                }\r\n            } else {\r\n                throw new TypeError(`Invalid payload for request to ${method} ${endpoint}`);\r\n            }\r\n        }\r\n\r\n        // default to JSON communication\r\n        if (!headers.has('Accept')) {\r\n            headers.set('Accept', 'application/json');\r\n        }\r\n        // set to JSON payload\r\n        if (shouldSetAsJSON) {\r\n            headers.set('Content-Type', 'application/json');\r\n        }\r\n\r\n        // OPTIONAL log request and response\r\n        this.log('debug', `Request ${method} ${endpoint}`);\r\n\r\n        // NOTE: will throw error on AbortError or client fetch errors\r\n        const response = await polyfills.fetch(`${url}`, {\r\n            ...fetchOptions,\r\n            method,\r\n            headers\r\n        });\r\n\r\n        const {\r\n            ok,\r\n            status: statusCode,\r\n            statusText,\r\n            headers: responseHeaders\r\n        } = response;\r\n\r\n        this.log('debug', `Response ${method} ${endpoint} ${statusCode} ${statusText}`);\r\n\r\n        // check for error response code\r\n        if (!ok) {\r\n            const err = await RevError.create(response);\r\n            throw err;\r\n        }\r\n\r\n        let body: any = response.body;\r\n\r\n        switch (responseType) {\r\n            case 'json':\r\n                body = await response.json();\r\n                break;\r\n            case 'text':\r\n                body = await response.text();\r\n                break;\r\n            case 'blob':\r\n                body = await response.blob();\r\n                break;\r\n            case 'stream':\r\n                body = response.body;\r\n                break;\r\n            default:\r\n                // if no mimetype in response then assume JSON unless otherwise specified\r\n                body = await decodeBody(response, headers.get('Accept'));\r\n        }\r\n\r\n        return {\r\n            statusCode,\r\n            headers: responseHeaders,\r\n            body,\r\n            response\r\n        };\r\n    }\r\n    async get<T = any>(endpoint: string, data?: PayloadType, options?: Rev.RequestOptions): Promise<T> {\r\n        const { body } = await this.request('GET', endpoint, data, options);\r\n        return body;\r\n    }\r\n    async post<T = any>(endpoint: string, data?: PayloadType, options?: Rev.RequestOptions): Promise<T> {\r\n        const { body } = await this.request('POST', endpoint, data, options);\r\n        return body;\r\n    }\r\n    async put<T = any>(endpoint: string, data?: PayloadType, options?: Rev.RequestOptions): Promise<T> {\r\n        const { body } = await this.request('PUT', endpoint, data, options);\r\n        return body;\r\n    }\r\n    async patch(endpoint: string, data?: PayloadType, options?: Rev.RequestOptions): Promise<void> {\r\n        await this.request('PATCH', endpoint, data, options);\r\n    }\r\n    async delete(endpoint: string, data?: PayloadType, options?: Rev.RequestOptions): Promise<void> {\r\n        await this.request('DELETE', endpoint, data, options);\r\n    }\r\n    /**\r\n     * authenticate with Rev\r\n     */\r\n    async connect() {\r\n\r\n        // Rarely the login call will fail on first attempt, therefore this code attempts to login\r\n        // multiple times\r\n        await retry(\r\n            () => this.session.login(),\r\n            // Do not re-attempt logins with invalid user/password or rate limiting - it can lock out the user\r\n            (err: RevError) => ![401, 429].includes(err.status));\r\n    }\r\n    /**\r\n     * end rev session\r\n     */\r\n    async disconnect() {\r\n        try {\r\n            await this.session.logoff();\r\n        } catch (error) {\r\n            this.log('warn', `Error in logoff, ignoring: ${error}`);\r\n        }\r\n    }\r\n    // this should get called every 15 minutes or so to extend the connection session\r\n    async extendSession() {\r\n        return this.session.extend();\r\n    }\r\n    /**\r\n     * Returns true/false based on if the session is currently valid\r\n     * @returns Promise<boolean>\r\n     */\r\n    async verifySession() {\r\n        return this.session.verify();\r\n    }\r\n    get isConnected() {\r\n        return this.session.token && !this.session.isExpired;\r\n    }\r\n    get token() {\r\n        return this.session.token;\r\n    }\r\n    get sessionExpires() {\r\n        return this.session.expires;\r\n    }\r\n    log(severity: Rev.LogSeverity, ...args: any[]) {\r\n        if (!this.logEnabled) {\r\n            return;\r\n        }\r\n        const ts = (new Date()).toJSON().replace('T', ' ').slice(0, -5);\r\n        console.debug(`${ts} REV-CLIENT [${severity}]`, ...args);\r\n    }\r\n}\r\n","import fs from 'fs';\r\nimport path from 'path';\r\nimport { createHmac } from 'crypto';\r\nimport { promisify } from 'util';\r\nimport fetch, { Headers, Request, Response } from 'node-fetch';\r\nimport FormData, { AppendOptions } from 'form-data';\r\nimport { isBlobLike, isReadable } from '../utils';\r\nimport type { UploadFileOptions, FileUploadPayloadInternal, FileUploadType } from '../utils/file-utils';\r\nimport { AbortSignal, AbortController } from 'node-abort-controller';\r\nimport polyfills from '.';\r\n\r\nasync function getLengthFromStream(source: Record<string, any>) {\r\n    const {\r\n        length,\r\n        contentLength,\r\n        headers = { },\r\n        path: filepath\r\n    } = source;\r\n\r\n    if (isFinite(length)) {\r\n        return length;\r\n    }\r\n    if (isFinite(contentLength)) {\r\n        return contentLength;\r\n    }\r\n    // a HTTP Response object\r\n    if (headers?.['content-length']) {\r\n        const headerLength = parseInt(headers['content-length'], 10);\r\n        if (isFinite(headerLength)) {\r\n            return headerLength;\r\n        }\r\n    }\r\n\r\n    // try to get size from a fs stream's path parameter\r\n    if (filepath) {\r\n        // sanity check 15 sec timeout\r\n        const TIMEOUT_MS = 15 * 1000;\r\n        let timer;\r\n        const timeout = new Promise<fs.Stats>(done => { timer = setTimeout(done, TIMEOUT_MS, { }); });\r\n        try {\r\n            const stat = await Promise.race([fs.promises.stat(filepath), timeout]);\r\n            if (stat?.size) {\r\n                return stat.size;\r\n            }\r\n        } catch (err) {\r\n            // ignore\r\n        } finally {\r\n            clearTimeout(timer);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * For node.js support this allows uploading videos based on filename or from a readable stream\r\n */\r\nasync function parseFileUpload(file: FileUploadType, options: UploadFileOptions): Promise<FileUploadPayloadInternal> {\r\n    let {\r\n        filename,\r\n        contentType,\r\n        contentLength,\r\n        useChunkedTransfer\r\n    } = options;\r\n\r\n    // only try to get length if not already specified, or useChunkedTransfer is set\r\n    const shouldUpdateLength = !(contentLength || useChunkedTransfer);\r\n\r\n    if (typeof file === 'string') {\r\n        if (!filename) {\r\n            filename = path.basename(file);\r\n        }\r\n        file = fs.createReadStream(file);\r\n\r\n        // get stats from disk\r\n        if (shouldUpdateLength) {\r\n            contentLength = await getLengthFromStream(file);\r\n        }\r\n    } else if (isBlobLike(file)) {\r\n        const { type, name, size } = <File>file;\r\n        if (type && !contentType) {\r\n            contentType = type;\r\n        }\r\n        if (name && !filename) {\r\n            filename = name;\r\n        }\r\n        if (shouldUpdateLength) {\r\n            contentLength = size;\r\n        }\r\n    } else if (isReadable(file)) {\r\n        if (!filename) {\r\n            const { path: _path, filename: _filename, name: _name } = file as Record<string, any>;\r\n            // try to get filename from stream\r\n            const streamPath = _path || _filename || _name;\r\n            if (streamPath && typeof streamPath === 'string') {\r\n                filename = path.basename(streamPath);\r\n            }\r\n        }\r\n        // try to get length from stream\r\n        if (shouldUpdateLength) {\r\n            contentLength = await getLengthFromStream(file);\r\n        }\r\n    }\r\n\r\n    return {\r\n        file,\r\n        options: {\r\n            ...options,\r\n            filename,\r\n            contentType,\r\n            contentLength\r\n        }\r\n    };\r\n}\r\nasync function appendFileToForm(form: FormData, fieldName: string, payload: FileUploadPayloadInternal) {\r\n    const {\r\n        file,\r\n        options: {\r\n            filename,\r\n            contentType,\r\n            contentLength\r\n        }\r\n    } = payload;\r\n    const appendOptions: AppendOptions = { filename, contentType };\r\n    if (contentLength) {\r\n        appendOptions.knownLength = contentLength;\r\n    }\r\n\r\n    form.append(fieldName, file, appendOptions);\r\n}\r\n\r\nasync function prepareUploadHeaders(form: FormData, headers: Headers, useChunkedTransfer: boolean = false) {\r\n    const totalBytes: number = useChunkedTransfer\r\n        ? 0\r\n        : await promisify(form.getLength).call(form).catch(() => 0) as number;\r\n\r\n    if (totalBytes > 0) {\r\n        headers.set('content-length', `${totalBytes}`);\r\n    } else {\r\n        headers.set('transfer-encoding', 'chunked');\r\n        headers.delete('content-length');\r\n        // HACK - node-fetch force attempts to get length from form-data. This is to keep it from setting the content-length header\r\n        // form.getLengthSync = () => null;\r\n    }\r\n}\r\n\r\nasync function hmacSign(message: string, secret: string) {\r\n    const hmac = createHmac('sha256', secret);\r\n    const signature = hmac.update(message).digest('base64');\r\n    return signature;\r\n}\r\n\r\nObject.assign(polyfills, {\r\n    AbortController,\r\n    AbortSignal,\r\n    fetch: (...args: Parameters<typeof fetch>) => fetch(...args),\r\n    FormData,\r\n    Headers,\r\n    Request,\r\n    Response,\r\n    hmacSign,\r\n    appendFileToForm,\r\n    parseFileUpload,\r\n    prepareUploadHeaders\r\n});\r\n\r\n"],"names":["hmacSign","appendFileToForm","interop","api.admin","api.audit","api.auth","api.category","api.channel","api.device","api.group","api.playlist","api.recording","api.upload","api.user","api.video","api.webcast","api.zones"],"mappings":"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"}